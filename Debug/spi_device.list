
spi_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007248  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080073cc  080073cc  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073cc  080073cc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080073d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000180  08007554  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  08007554  00021344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012977  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308b  00000000  00000000  00032b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  00036680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e39  00000000  00000000  00036fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010680  00000000  00000000  00050e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cfc  00000000  00000000  00061491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e618d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002860  00000000  00000000  000e61e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800733c 	.word	0x0800733c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800733c 	.word	0x0800733c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <led_toggle>:

void led_off(){
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
}

void led_toggle(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <led_toggle+0x14>)
 8000166:	f000 fca1 	bl	8000aac <HAL_GPIO_TogglePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40011000 	.word	0x40011000

08000174 <my_main_run>:
#include "usbd_cdc_if.h"
#include "string.h"

uint8_t *data = "Dobry wiecz√≥r Polsko!!!\n\t";

void my_main_run(){
 8000174:	b598      	push	{r3, r4, r7, lr}
 8000176:	af00      	add	r7, sp, #0
	for (;;) {
		led_toggle();
 8000178:	f7ff fff0 	bl	800015c <led_toggle>
		CDC_Transmit_FS(data, strlen(data));
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <my_main_run+0x2c>)
 800017e:	681c      	ldr	r4, [r3, #0]
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <my_main_run+0x2c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	f7ff ffe1 	bl	800014c <strlen>
 800018a:	4603      	mov	r3, r0
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4620      	mov	r0, r4
 8000192:	f006 fcc1 	bl	8006b18 <CDC_Transmit_FS>
		HAL_Delay(1150);
 8000196:	f240 407e 	movw	r0, #1150	; 0x47e
 800019a:	f000 f9b9 	bl	8000510 <HAL_Delay>
		led_toggle();
 800019e:	e7eb      	b.n	8000178 <my_main_run+0x4>
 80001a0:	20000000 	.word	0x20000000

080001a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b088      	sub	sp, #32
 80001a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001aa:	f107 0310 	add.w	r3, r7, #16
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001b8:	4b1e      	ldr	r3, [pc, #120]	; (8000234 <MX_GPIO_Init+0x90>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1d      	ldr	r2, [pc, #116]	; (8000234 <MX_GPIO_Init+0x90>)
 80001be:	f043 0310 	orr.w	r3, r3, #16
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b1b      	ldr	r3, [pc, #108]	; (8000234 <MX_GPIO_Init+0x90>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0310 	and.w	r3, r3, #16
 80001cc:	60fb      	str	r3, [r7, #12]
 80001ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <MX_GPIO_Init+0x90>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a17      	ldr	r2, [pc, #92]	; (8000234 <MX_GPIO_Init+0x90>)
 80001d6:	f043 0320 	orr.w	r3, r3, #32
 80001da:	6193      	str	r3, [r2, #24]
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <MX_GPIO_Init+0x90>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	f003 0320 	and.w	r3, r3, #32
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <MX_GPIO_Init+0x90>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a11      	ldr	r2, [pc, #68]	; (8000234 <MX_GPIO_Init+0x90>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <MX_GPIO_Init+0x90>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f003 0304 	and.w	r3, r3, #4
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000206:	480c      	ldr	r0, [pc, #48]	; (8000238 <MX_GPIO_Init+0x94>)
 8000208:	f000 fc38 	bl	8000a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800020c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <MX_GPIO_Init+0x94>)
 8000226:	f000 faa5 	bl	8000774 <HAL_GPIO_Init>

}
 800022a:	bf00      	nop
 800022c:	3720      	adds	r7, #32
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40011000 	.word	0x40011000

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 f904 	bl	800044c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f807 	bl	8000256 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f7ff ffac 	bl	80001a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800024c:	f006 fba6 	bl	800699c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  my_main_run();
 8000250:	f7ff ff90 	bl	8000174 <my_main_run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	e7fe      	b.n	8000254 <main+0x18>

08000256 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b094      	sub	sp, #80	; 0x50
 800025a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000260:	2228      	movs	r2, #40	; 0x28
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f007 f861 	bl	800732c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000286:	2301      	movs	r3, #1
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	2302      	movs	r3, #2
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 f8db 	bl	8002468 <HAL_RCC_OscConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b8:	f000 f828 	bl	800030c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2101      	movs	r1, #1
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fb45 	bl	8002968 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e4:	f000 f812 	bl	800030c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002e8:	2310      	movs	r3, #16
 80002ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fc9f 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000300:	f000 f804 	bl	800030c <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3750      	adds	r7, #80	; 0x50
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000310:	b672      	cpsid	i
}
 8000312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000314:	e7fe      	b.n	8000314 <Error_Handler+0x8>
	...

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <HAL_MspInit+0x5c>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a14      	ldr	r2, [pc, #80]	; (8000374 <HAL_MspInit+0x5c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_MspInit+0x5c>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <HAL_MspInit+0x5c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_MspInit+0x5c>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_MspInit+0x5c>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <HAL_MspInit+0x60>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <HAL_MspInit+0x60>)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000
 8000378:	40010000 	.word	0x40010000

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <NMI_Handler+0x4>

08000382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>

0800039a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c2:	f000 f889 	bl	80004d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003d0:	4802      	ldr	r0, [pc, #8]	; (80003dc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80003d2:	f000 fcb5 	bl	8000d40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20001058 	.word	0x20001058

080003e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003e4:	4802      	ldr	r0, [pc, #8]	; (80003f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003e6:	f000 fcab 	bl	8000d40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20001058 	.word	0x20001058

080003f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000426:	f7ff ffe5 	bl	80003f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800042a:	f006 ff5b 	bl	80072e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff ff05 	bl	800023c <main>
  bx lr
 8000432:	4770      	bx	lr
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800043c:	080073d4 	.word	0x080073d4
  ldr r2, =_sbss
 8000440:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000444:	20001344 	.word	0x20001344

08000448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC1_2_IRQHandler>
	...

0800044c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_Init+0x28>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_Init+0x28>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800045c:	2003      	movs	r0, #3
 800045e:	f000 f947 	bl	80006f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000462:	2000      	movs	r0, #0
 8000464:	f000 f808 	bl	8000478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000468:	f7ff ff56 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_InitTick+0x54>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_InitTick+0x58>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000492:	fbb2 f3f3 	udiv	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 f95f 	bl	800075a <HAL_SYSTICK_Config>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e00e      	b.n	80004c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d80a      	bhi.n	80004c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	f04f 30ff 	mov.w	r0, #4294967295
 80004b4:	f000 f927 	bl	8000706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <HAL_InitTick+0x5c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	e000      	b.n	80004c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000004 	.word	0x20000004
 80004d0:	2000000c 	.word	0x2000000c
 80004d4:	20000008 	.word	0x20000008

080004d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_IncTick+0x1c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_IncTick+0x20>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <HAL_IncTick+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	2000000c 	.word	0x2000000c
 80004f8:	200003c0 	.word	0x200003c0

080004fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <HAL_GetTick+0x10>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	200003c0 	.word	0x200003c0

08000510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000518:	f7ff fff0 	bl	80004fc <HAL_GetTick>
 800051c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000528:	d005      	beq.n	8000536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_Delay+0x44>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000536:	bf00      	nop
 8000538:	f7ff ffe0 	bl	80004fc <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	429a      	cmp	r2, r3
 8000546:	d8f7      	bhi.n	8000538 <HAL_Delay+0x28>
  {
  }
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000000c 	.word	0x2000000c

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db0b      	blt.n	80005e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 021f 	and.w	r2, r3, #31
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <__NVIC_EnableIRQ+0x34>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	095b      	lsrs	r3, r3, #5
 80005dc:	2001      	movs	r0, #1
 80005de:	fa00 f202 	lsl.w	r2, r0, r2
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006bc:	d301      	bcc.n	80006c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2301      	movs	r3, #1
 80006c0:	e00f      	b.n	80006e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_Config+0x40>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ca:	210f      	movs	r1, #15
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff90 	bl	80005f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_Config+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x40>)
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff2d 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000718:	f7ff ff42 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 800071c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6978      	ldr	r0, [r7, #20]
 8000724:	f7ff ff90 	bl	8000648 <NVIC_EncodePriority>
 8000728:	4602      	mov	r2, r0
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5f 	bl	80005f4 <__NVIC_SetPriority>
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff35 	bl	80005bc <__NVIC_EnableIRQ>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffa2 	bl	80006ac <SysTick_Config>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b480      	push	{r7}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000786:	e169      	b.n	8000a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000788:	2201      	movs	r2, #1
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	4013      	ands	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f040 8158 	bne.w	8000a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a9a      	ldr	r2, [pc, #616]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d05e      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007b0:	4a98      	ldr	r2, [pc, #608]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d875      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007b6:	4a98      	ldr	r2, [pc, #608]	; (8000a18 <HAL_GPIO_Init+0x2a4>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d058      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007bc:	4a96      	ldr	r2, [pc, #600]	; (8000a18 <HAL_GPIO_Init+0x2a4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d86f      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007c2:	4a96      	ldr	r2, [pc, #600]	; (8000a1c <HAL_GPIO_Init+0x2a8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d052      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007c8:	4a94      	ldr	r2, [pc, #592]	; (8000a1c <HAL_GPIO_Init+0x2a8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d869      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007ce:	4a94      	ldr	r2, [pc, #592]	; (8000a20 <HAL_GPIO_Init+0x2ac>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d04c      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007d4:	4a92      	ldr	r2, [pc, #584]	; (8000a20 <HAL_GPIO_Init+0x2ac>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d863      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007da:	4a92      	ldr	r2, [pc, #584]	; (8000a24 <HAL_GPIO_Init+0x2b0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d046      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007e0:	4a90      	ldr	r2, [pc, #576]	; (8000a24 <HAL_GPIO_Init+0x2b0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d85d      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007e6:	2b12      	cmp	r3, #18
 80007e8:	d82a      	bhi.n	8000840 <HAL_GPIO_Init+0xcc>
 80007ea:	2b12      	cmp	r3, #18
 80007ec:	d859      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007ee:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <HAL_GPIO_Init+0x80>)
 80007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f4:	0800086f 	.word	0x0800086f
 80007f8:	08000849 	.word	0x08000849
 80007fc:	0800085b 	.word	0x0800085b
 8000800:	0800089d 	.word	0x0800089d
 8000804:	080008a3 	.word	0x080008a3
 8000808:	080008a3 	.word	0x080008a3
 800080c:	080008a3 	.word	0x080008a3
 8000810:	080008a3 	.word	0x080008a3
 8000814:	080008a3 	.word	0x080008a3
 8000818:	080008a3 	.word	0x080008a3
 800081c:	080008a3 	.word	0x080008a3
 8000820:	080008a3 	.word	0x080008a3
 8000824:	080008a3 	.word	0x080008a3
 8000828:	080008a3 	.word	0x080008a3
 800082c:	080008a3 	.word	0x080008a3
 8000830:	080008a3 	.word	0x080008a3
 8000834:	080008a3 	.word	0x080008a3
 8000838:	08000851 	.word	0x08000851
 800083c:	08000865 	.word	0x08000865
 8000840:	4a79      	ldr	r2, [pc, #484]	; (8000a28 <HAL_GPIO_Init+0x2b4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d013      	beq.n	800086e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000846:	e02c      	b.n	80008a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	623b      	str	r3, [r7, #32]
          break;
 800084e:	e029      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	3304      	adds	r3, #4
 8000856:	623b      	str	r3, [r7, #32]
          break;
 8000858:	e024      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	3308      	adds	r3, #8
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e01f      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	330c      	adds	r3, #12
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e01a      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000876:	2304      	movs	r3, #4
 8000878:	623b      	str	r3, [r7, #32]
          break;
 800087a:	e013      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d105      	bne.n	8000890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000884:	2308      	movs	r3, #8
 8000886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	611a      	str	r2, [r3, #16]
          break;
 800088e:	e009      	b.n	80008a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000890:	2308      	movs	r3, #8
 8000892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	615a      	str	r2, [r3, #20]
          break;
 800089a:	e003      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
          break;
 80008a0:	e000      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          break;
 80008a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	2bff      	cmp	r3, #255	; 0xff
 80008a8:	d801      	bhi.n	80008ae <HAL_GPIO_Init+0x13a>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	e001      	b.n	80008b2 <HAL_GPIO_Init+0x13e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3304      	adds	r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	2bff      	cmp	r3, #255	; 0xff
 80008b8:	d802      	bhi.n	80008c0 <HAL_GPIO_Init+0x14c>
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	e002      	b.n	80008c6 <HAL_GPIO_Init+0x152>
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	3b08      	subs	r3, #8
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	210f      	movs	r1, #15
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	401a      	ands	r2, r3
 80008d8:	6a39      	ldr	r1, [r7, #32]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	431a      	orrs	r2, r3
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 80b1 	beq.w	8000a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008f4:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <HAL_GPIO_Init+0x2b8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a4c      	ldr	r2, [pc, #304]	; (8000a2c <HAL_GPIO_Init+0x2b8>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b4a      	ldr	r3, [pc, #296]	; (8000a2c <HAL_GPIO_Init+0x2b8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800090c:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <HAL_GPIO_Init+0x2bc>)
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	3302      	adds	r3, #2
 8000914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	220f      	movs	r2, #15
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a40      	ldr	r2, [pc, #256]	; (8000a34 <HAL_GPIO_Init+0x2c0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d013      	beq.n	8000960 <HAL_GPIO_Init+0x1ec>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a3f      	ldr	r2, [pc, #252]	; (8000a38 <HAL_GPIO_Init+0x2c4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d00d      	beq.n	800095c <HAL_GPIO_Init+0x1e8>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a3e      	ldr	r2, [pc, #248]	; (8000a3c <HAL_GPIO_Init+0x2c8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0x1e4>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a3d      	ldr	r2, [pc, #244]	; (8000a40 <HAL_GPIO_Init+0x2cc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d101      	bne.n	8000954 <HAL_GPIO_Init+0x1e0>
 8000950:	2303      	movs	r3, #3
 8000952:	e006      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 8000954:	2304      	movs	r3, #4
 8000956:	e004      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 8000958:	2302      	movs	r3, #2
 800095a:	e002      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 8000960:	2300      	movs	r3, #0
 8000962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000964:	f002 0203 	and.w	r2, r2, #3
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	4093      	lsls	r3, r2
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4313      	orrs	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000972:	492f      	ldr	r1, [pc, #188]	; (8000a30 <HAL_GPIO_Init+0x2bc>)
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	3302      	adds	r3, #2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	492c      	ldr	r1, [pc, #176]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	600b      	str	r3, [r1, #0]
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4928      	ldr	r1, [pc, #160]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d006      	beq.n	80009c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4922      	ldr	r1, [pc, #136]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	604b      	str	r3, [r1, #4]
 80009c0:	e006      	b.n	80009d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	43db      	mvns	r3, r3
 80009ca:	491e      	ldr	r1, [pc, #120]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009cc:	4013      	ands	r3, r2
 80009ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d006      	beq.n	80009ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	4918      	ldr	r1, [pc, #96]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	608b      	str	r3, [r1, #8]
 80009e8:	e006      	b.n	80009f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4914      	ldr	r1, [pc, #80]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d021      	beq.n	8000a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	490e      	ldr	r1, [pc, #56]	; (8000a44 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60cb      	str	r3, [r1, #12]
 8000a10:	e021      	b.n	8000a56 <HAL_GPIO_Init+0x2e2>
 8000a12:	bf00      	nop
 8000a14:	10320000 	.word	0x10320000
 8000a18:	10310000 	.word	0x10310000
 8000a1c:	10220000 	.word	0x10220000
 8000a20:	10210000 	.word	0x10210000
 8000a24:	10120000 	.word	0x10120000
 8000a28:	10110000 	.word	0x10110000
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000
 8000a34:	40010800 	.word	0x40010800
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	40011400 	.word	0x40011400
 8000a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_GPIO_Init+0x304>)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	4909      	ldr	r1, [pc, #36]	; (8000a78 <HAL_GPIO_Init+0x304>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3301      	adds	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	fa22 f303 	lsr.w	r3, r2, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f47f ae8e 	bne.w	8000788 <HAL_GPIO_Init+0x14>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	372c      	adds	r7, #44	; 0x2c
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	40010400 	.word	0x40010400

08000a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a98:	e003      	b.n	8000aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	041a      	lsls	r2, r3, #16
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	611a      	str	r2, [r3, #16]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000abe:	887a      	ldrh	r2, [r7, #2]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	041a      	lsls	r2, r3, #16
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	43d9      	mvns	r1, r3
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	400b      	ands	r3, r1
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	611a      	str	r2, [r3, #16]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae0:	b08b      	sub	sp, #44	; 0x2c
 8000ae2:	af06      	add	r7, sp, #24
 8000ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e0fd      	b.n	8000cec <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d106      	bne.n	8000b0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f006 f93b 	bl	8006d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 f96a 	bl	8002df0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	687e      	ldr	r6, [r7, #4]
 8000b24:	466d      	mov	r5, sp
 8000b26:	f106 0410 	add.w	r4, r6, #16
 8000b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	602b      	str	r3, [r5, #0]
 8000b32:	1d33      	adds	r3, r6, #4
 8000b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b36:	6838      	ldr	r0, [r7, #0]
 8000b38:	f002 f934 	bl	8002da4 <USB_CoreInit>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2202      	movs	r2, #2
 8000b46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e0ce      	b.n	8000cec <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 f965 	bl	8002e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e04c      	b.n	8000bfa <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3301      	adds	r3, #1
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	b298      	uxth	r0, r3
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3336      	adds	r3, #54	; 0x36
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3303      	adds	r3, #3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3338      	adds	r3, #56	; 0x38
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bcc:	7bfa      	ldrb	r2, [r7, #15]
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	333c      	adds	r3, #60	; 0x3c
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	440b      	add	r3, r1
 8000bee:	3340      	adds	r3, #64	; 0x40
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	7bfa      	ldrb	r2, [r7, #15]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3ad      	bcc.n	8000b60 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e044      	b.n	8000c94 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3b5      	bcc.n	8000c0a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	687e      	ldr	r6, [r7, #4]
 8000ca6:	466d      	mov	r5, sp
 8000ca8:	f106 0410 	add.w	r4, r6, #16
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	602b      	str	r3, [r5, #0]
 8000cb4:	1d33      	adds	r3, r6, #4
 8000cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb8:	6838      	ldr	r0, [r7, #0]
 8000cba:	f002 f8bf 	bl	8002e3c <USB_DevInit>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e00d      	b.n	8000cec <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 fa30 	bl	800514a <USB_DevDisconnect>

  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_PCD_Start+0x16>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e016      	b.n	8000d38 <HAL_PCD_Start+0x44>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 f854 	bl	8002dc4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f006 faa9 	bl	8007276 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 fa04 	bl	8005136 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 fa06 	bl	800515e <USB_ReadInterrupts>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d5c:	d102      	bne.n	8000d64 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 fb61 	bl	8001426 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 f9f8 	bl	800515e <USB_ReadInterrupts>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d78:	d112      	bne.n	8000da0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d8c:	b292      	uxth	r2, r2
 8000d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f006 f877 	bl	8006e86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f925 	bl	8000fea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f9da 	bl	800515e <USB_ReadInterrupts>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000db4:	d10b      	bne.n	8000dce <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dc8:	b292      	uxth	r2, r2
 8000dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f9c3 	bl	800515e <USB_ReadInterrupts>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de2:	d10b      	bne.n	8000dfc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000df6:	b292      	uxth	r2, r2
 8000df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 f9ac 	bl	800515e <USB_ReadInterrupts>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e10:	d126      	bne.n	8000e60 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0204 	bic.w	r2, r2, #4
 8000e24:	b292      	uxth	r2, r2
 8000e26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0208 	bic.w	r2, r2, #8
 8000e3c:	b292      	uxth	r2, r2
 8000e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f006 f858 	bl	8006ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 f97a 	bl	800515e <USB_ReadInterrupts>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e74:	f040 8084 	bne.w	8000f80 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	77fb      	strb	r3, [r7, #31]
 8000e7c:	e011      	b.n	8000ea2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	7ffb      	ldrb	r3, [r7, #31]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	441a      	add	r2, r3
 8000e8a:	7ffb      	ldrb	r3, [r7, #31]
 8000e8c:	8812      	ldrh	r2, [r2, #0]
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	f107 0120 	add.w	r1, r7, #32
 8000e96:	440b      	add	r3, r1
 8000e98:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000e9c:	7ffb      	ldrb	r3, [r7, #31]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	77fb      	strb	r3, [r7, #31]
 8000ea2:	7ffb      	ldrb	r3, [r7, #31]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d9ea      	bls.n	8000e7e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ed8:	bf00      	nop
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f6      	beq.n	8000eda <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000efe:	b292      	uxth	r2, r2
 8000f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	77fb      	strb	r3, [r7, #31]
 8000f08:	e010      	b.n	8000f2c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	4611      	mov	r1, r2
 8000f12:	7ffa      	ldrb	r2, [r7, #31]
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	440a      	add	r2, r1
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	f107 0120 	add.w	r1, r7, #32
 8000f1e:	440b      	add	r3, r1
 8000f20:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f24:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	77fb      	strb	r3, [r7, #31]
 8000f2c:	7ffb      	ldrb	r3, [r7, #31]
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	d9eb      	bls.n	8000f0a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0208 	orr.w	r2, r2, #8
 8000f44:	b292      	uxth	r2, r2
 8000f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0204 	orr.w	r2, r2, #4
 8000f74:	b292      	uxth	r2, r2
 8000f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f005 ffa2 	bl	8006ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f8ea 	bl	800515e <USB_ReadInterrupts>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f94:	d10e      	bne.n	8000fb4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f005 ff5b 	bl	8006e6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 f8d0 	bl	800515e <USB_ReadInterrupts>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_PCD_SetAddress+0x1a>
 8001000:	2302      	movs	r3, #2
 8001002:	e013      	b.n	800102c <HAL_PCD_SetAddress+0x42>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	78fa      	ldrb	r2, [r7, #3]
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f004 f877 	bl	8005110 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	70fb      	strb	r3, [r7, #3]
 8001046:	460b      	mov	r3, r1
 8001048:	803b      	strh	r3, [r7, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	da0e      	bge.n	8001078 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	705a      	strb	r2, [r3, #1]
 8001076:	e00e      	b.n	8001096 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	f003 0207 	and.w	r2, r3, #7
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	b2da      	uxtb	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010a2:	883a      	ldrh	r2, [r7, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	78ba      	ldrb	r2, [r7, #2]
 80010ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d004      	beq.n	80010c0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d102      	bne.n	80010cc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2200      	movs	r2, #0
 80010ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_PCD_EP_Open+0xa6>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e00e      	b.n	80010f8 <HAL_PCD_EP_Open+0xc4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fec7 	bl	8002e7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80010f6:	7afb      	ldrb	r3, [r7, #11]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800110c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	da0e      	bge.n	8001132 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	705a      	strb	r2, [r3, #1]
 8001130:	e00e      	b.n	8001150 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	f003 0207 	and.w	r2, r3, #7
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_PCD_EP_Close+0x6a>
 8001166:	2302      	movs	r3, #2
 8001168:	e00e      	b.n	8001188 <HAL_PCD_EP_Close+0x88>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68f9      	ldr	r1, [r7, #12]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f9e9 	bl	8003550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	460b      	mov	r3, r1
 800119e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	f003 0207 	and.w	r2, r3, #7
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4413      	add	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2200      	movs	r2, #0
 80011ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6979      	ldr	r1, [r7, #20]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fb9b 	bl	8003928 <USB_EPStartXfer>
 80011f2:	e005      	b.n	8001200 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6979      	ldr	r1, [r7, #20]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fb94 	bl	8003928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	f003 0207 	and.w	r2, r3, #7
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800122c:	681b      	ldr	r3, [r3, #0]
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	460b      	mov	r3, r1
 8001246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2201      	movs	r2, #1
 8001282:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	b2da      	uxtb	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6979      	ldr	r1, [r7, #20]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fb41 	bl	8003928 <USB_EPStartXfer>
 80012a6:	e005      	b.n	80012b4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6979      	ldr	r1, [r7, #20]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fb3a 	bl	8003928 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	f003 0207 	and.w	r2, r3, #7
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d901      	bls.n	80012dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e04c      	b.n	8001376 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da0e      	bge.n	8001302 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2201      	movs	r2, #1
 80012fe:	705a      	strb	r2, [r3, #1]
 8001300:	e00c      	b.n	800131c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2201      	movs	r2, #1
 8001320:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_PCD_EP_SetStall+0x7e>
 8001338:	2302      	movs	r3, #2
 800133a:	e01c      	b.n	8001376 <HAL_PCD_EP_SetStall+0xb8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fde3 	bl	8004f16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001364:	4619      	mov	r1, r3
 8001366:	4610      	mov	r0, r2
 8001368:	f003 ff08 	bl	800517c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	f003 020f 	and.w	r2, r3, #15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d901      	bls.n	800139c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e040      	b.n	800141e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800139c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da0e      	bge.n	80013c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2201      	movs	r2, #1
 80013be:	705a      	strb	r2, [r3, #1]
 80013c0:	e00e      	b.n	80013e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	f003 0207 	and.w	r2, r3, #7
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_PCD_EP_ClrStall+0x82>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e00e      	b.n	800141e <HAL_PCD_EP_ClrStall+0xa0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fdd1 	bl	8004fb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b08e      	sub	sp, #56	; 0x38
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800142e:	e2ec      	b.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001438:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800143a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001446:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8161 	bne.w	8001712 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001450:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	d152      	bne.n	8001500 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800146a:	81fb      	strh	r3, [r7, #14]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800147a:	b29b      	uxth	r3, r3
 800147c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3328      	adds	r3, #40	; 0x28
 8001482:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800148c:	b29b      	uxth	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	3302      	adds	r3, #2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	441a      	add	r2, r3
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014be:	2100      	movs	r1, #0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f005 fcb8 	bl	8006e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 829b 	beq.w	8001a0a <PCD_EP_ISR_Handler+0x5e4>
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 8296 	bne.w	8001a0a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014fe:	e284      	b.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001510:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001516:	2b00      	cmp	r3, #0
 8001518:	d034      	beq.n	8001584 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	3306      	adds	r3, #6
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001558:	b29b      	uxth	r3, r3
 800155a:	f003 fe5f 	bl	800521c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b29a      	uxth	r2, r3
 8001566:	f640 738f 	movw	r3, #3983	; 0xf8f
 800156a:	4013      	ands	r3, r2
 800156c:	823b      	strh	r3, [r7, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	8a3a      	ldrh	r2, [r7, #16]
 8001574:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001578:	b292      	uxth	r2, r2
 800157a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f005 fc2d 	bl	8006ddc <HAL_PCD_SetupStageCallback>
 8001582:	e242      	b.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001584:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001588:	2b00      	cmp	r3, #0
 800158a:	f280 823e 	bge.w	8001a0a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
 8001596:	f640 738f 	movw	r3, #3983	; 0xf8f
 800159a:	4013      	ands	r3, r2
 800159c:	83bb      	strh	r3, [r7, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	8bba      	ldrh	r2, [r7, #28]
 80015a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a8:	b292      	uxth	r2, r2
 80015aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	3306      	adds	r3, #6
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d019      	beq.n	8001614 <PCD_EP_ISR_Handler+0x1ee>
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	6959      	ldr	r1, [r3, #20]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f003 fe0f 	bl	800521c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	441a      	add	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800160c:	2100      	movs	r1, #0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f005 fbf6 	bl	8006e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 81f2 	bne.w	8001a0a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d112      	bne.n	8001674 <PCD_EP_ISR_Handler+0x24e>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001658:	b29a      	uxth	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800166c:	b29a      	uxth	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	e02f      	b.n	80016d4 <PCD_EP_ISR_Handler+0x2ae>
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b3e      	cmp	r3, #62	; 0x3e
 800167a:	d813      	bhi.n	80016a4 <PCD_EP_ISR_Handler+0x27e>
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <PCD_EP_ISR_Handler+0x270>
 8001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001692:	3301      	adds	r3, #1
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
 8001696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001698:	b29b      	uxth	r3, r3
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	b29a      	uxth	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	e017      	b.n	80016d4 <PCD_EP_ISR_Handler+0x2ae>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <PCD_EP_ISR_Handler+0x298>
 80016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ba:	3b01      	subs	r3, #1
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	029b      	lsls	r3, r3, #10
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e4:	827b      	strh	r3, [r7, #18]
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80016ec:	827b      	strh	r3, [r7, #18]
 80016ee:	8a7b      	ldrh	r3, [r7, #18]
 80016f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016f4:	827b      	strh	r3, [r7, #18]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	8a7b      	ldrh	r3, [r7, #18]
 80016fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170c:	b29b      	uxth	r3, r3
 800170e:	8013      	strh	r3, [r2, #0]
 8001710:	e17b      	b.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001724:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001728:	2b00      	cmp	r3, #0
 800172a:	f280 80ea 	bge.w	8001902 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29a      	uxth	r2, r3
 8001740:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001744:	4013      	ands	r3, r2
 8001746:	853b      	strh	r3, [r7, #40]	; 0x28
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175c:	b292      	uxth	r2, r2
 800175e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001760:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	7b1b      	ldrb	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d122      	bne.n	80017c4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	3306      	adds	r3, #6
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	6959      	ldr	r1, [r3, #20]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	88da      	ldrh	r2, [r3, #6]
 80017bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017be:	f003 fd2d 	bl	800521c <USB_ReadPMA>
 80017c2:	e07c      	b.n	80018be <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	78db      	ldrb	r3, [r3, #3]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d108      	bne.n	80017de <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017ce:	461a      	mov	r2, r3
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f927 	bl	8001a26 <HAL_PCD_EP_DB_Receive>
 80017d8:	4603      	mov	r3, r0
 80017da:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017dc:	e06f      	b.n	80018be <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	441a      	add	r2, r3
 8001808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800180a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800180e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800181a:	b29b      	uxth	r3, r3
 800181c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d021      	beq.n	800187c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001840:	b29b      	uxth	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	3302      	adds	r3, #2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001860:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001864:	2b00      	cmp	r3, #0
 8001866:	d02a      	beq.n	80018be <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	6959      	ldr	r1, [r3, #20]
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	891a      	ldrh	r2, [r3, #8]
 8001874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001876:	f003 fcd1 	bl	800521c <USB_ReadPMA>
 800187a:	e020      	b.n	80018be <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001884:	b29b      	uxth	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	3306      	adds	r3, #6
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	6959      	ldr	r1, [r3, #20]
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	895a      	ldrh	r2, [r3, #10]
 80018b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ba:	f003 fcaf 	bl	800521c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018c4:	441a      	add	r2, r3
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d0:	441a      	add	r2, r3
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <PCD_EP_ISR_Handler+0x4c2>
 80018de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d206      	bcs.n	80018f6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f005 fa86 	bl	8006e00 <HAL_PCD_DataOutStageCallback>
 80018f4:	e005      	b.n	8001902 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 f813 	bl	8003928 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	2b00      	cmp	r3, #0
 800190a:	d07e      	beq.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800190c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193a:	843b      	strh	r3, [r7, #32]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	441a      	add	r2, r3
 800194a:	8c3b      	ldrh	r3, [r7, #32]
 800194c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001954:	b29b      	uxth	r3, r3
 8001956:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	78db      	ldrb	r3, [r3, #3]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d00c      	beq.n	800197a <PCD_EP_ISR_Handler+0x554>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800196c:	2b02      	cmp	r3, #2
 800196e:	d146      	bne.n	80019fe <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001970:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d141      	bne.n	80019fe <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	3302      	adds	r3, #2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4413      	add	r3, r2
 8001998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	8bfb      	ldrh	r3, [r7, #30]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d906      	bls.n	80019bc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	8bfb      	ldrh	r3, [r7, #30]
 80019b4:	1ad2      	subs	r2, r2, r3
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	619a      	str	r2, [r3, #24]
 80019ba:	e002      	b.n	80019c2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f005 fa30 	bl	8006e36 <HAL_PCD_DataInStageCallback>
 80019d6:	e018      	b.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	8bfb      	ldrh	r3, [r7, #30]
 80019de:	441a      	add	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	69da      	ldr	r2, [r3, #28]
 80019e8:	8bfb      	ldrh	r3, [r7, #30]
 80019ea:	441a      	add	r2, r3
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 ff96 	bl	8003928 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80019fc:	e005      	b.n	8001a0a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80019fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f91b 	bl	8001c40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f6ff ad0a 	blt.w	8001430 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3738      	adds	r7, #56	; 0x38
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b088      	sub	sp, #32
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d07e      	beq.n	8001b3c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	3302      	adds	r3, #2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	8b7b      	ldrh	r3, [r7, #26]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d306      	bcc.n	8001a80 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	8b7b      	ldrh	r3, [r7, #26]
 8001a78:	1ad2      	subs	r2, r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	619a      	str	r2, [r3, #24]
 8001a7e:	e002      	b.n	8001a86 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d123      	bne.n	8001ad6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa8:	833b      	strh	r3, [r7, #24]
 8001aaa:	8b3b      	ldrh	r3, [r7, #24]
 8001aac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ab0:	833b      	strh	r3, [r7, #24]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	441a      	add	r2, r3
 8001ac0:	8b3b      	ldrh	r3, [r7, #24]
 8001ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01f      	beq.n	8001b20 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afa:	82fb      	strh	r3, [r7, #22]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	8afb      	ldrh	r3, [r7, #22]
 8001b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b20:	8b7b      	ldrh	r3, [r7, #26]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	6959      	ldr	r1, [r3, #20]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	891a      	ldrh	r2, [r3, #8]
 8001b34:	8b7b      	ldrh	r3, [r7, #26]
 8001b36:	f003 fb71 	bl	800521c <USB_ReadPMA>
 8001b3a:	e07c      	b.n	8001c36 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3306      	adds	r3, #6
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d306      	bcc.n	8001b7e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	8b7b      	ldrh	r3, [r7, #26]
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	619a      	str	r2, [r3, #24]
 8001b7c:	e002      	b.n	8001b84 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d123      	bne.n	8001bd4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba6:	83fb      	strh	r3, [r7, #30]
 8001ba8:	8bfb      	ldrh	r3, [r7, #30]
 8001baa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bae:	83fb      	strh	r3, [r7, #30]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	441a      	add	r2, r3
 8001bbe:	8bfb      	ldrh	r3, [r7, #30]
 8001bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d11f      	bne.n	8001c1e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf8:	83bb      	strh	r3, [r7, #28]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	441a      	add	r2, r3
 8001c08:	8bbb      	ldrh	r3, [r7, #28]
 8001c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	6959      	ldr	r1, [r3, #20]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	895a      	ldrh	r2, [r3, #10]
 8001c30:	8b7b      	ldrh	r3, [r7, #26]
 8001c32:	f003 faf3 	bl	800521c <USB_ReadPMA>
    }
  }

  return count;
 8001c36:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0a2      	sub	sp, #136	; 0x88
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 81c7 	beq.w	8001fe8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d907      	bls.n	8001ca2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	e002      	b.n	8001ca8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 80b9 	bne.w	8001e24 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d126      	bne.n	8001d08 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	4413      	add	r3, r2
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	011a      	lsls	r2, r3, #4
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	4413      	add	r3, r2
 8001cdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	e01a      	b.n	8001d3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d116      	bne.n	8001d3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	4413      	add	r3, r2
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	011a      	lsls	r2, r3, #4
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	4413      	add	r3, r2
 8001d32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d126      	bne.n	8001d9a <HAL_PCD_EP_DB_Transmit+0x15a>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4413      	add	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	011a      	lsls	r2, r3, #4
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	e017      	b.n	8001dca <HAL_PCD_EP_DB_Transmit+0x18a>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d113      	bne.n	8001dca <HAL_PCD_EP_DB_Transmit+0x18a>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	4413      	add	r3, r2
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	011a      	lsls	r2, r3, #4
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f005 f830 	bl	8006e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 82d4 	beq.w	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfc:	827b      	strh	r3, [r7, #18]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	8013      	strh	r3, [r2, #0]
 8001e22:	e2b2      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d021      	beq.n	8001e72 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f040 8286 	bne.w	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e86:	441a      	add	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e94:	441a      	add	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d309      	bcc.n	8001eba <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	621a      	str	r2, [r3, #32]
 8001eb8:	e015      	b.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ed0:	e009      	b.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d155      	bne.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x35a>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f02:	4413      	add	r3, r2
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	011a      	lsls	r2, r3, #4
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	4413      	add	r3, r2
 8001f10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
 8001f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x302>
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e047      	b.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f44:	2b3e      	cmp	r3, #62	; 0x3e
 8001f46:	d811      	bhi.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x32c>
 8001f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_PCD_EP_DB_Transmit+0x31e>
 8001f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e032      	b.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_EP_DB_Transmit+0x342>
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	e01b      	b.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d117      	bne.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb6:	4413      	add	r3, r2
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	011a      	lsls	r2, r3, #4
 8001fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6959      	ldr	r1, [r3, #20]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	891a      	ldrh	r2, [r3, #8]
 8001fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f003 f8d6 	bl	8005192 <USB_WritePMA>
 8001fe6:	e1d0      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3306      	adds	r3, #6
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002010:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800201c:	429a      	cmp	r2, r3
 800201e:	d307      	bcc.n	8002030 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002028:	1ad2      	subs	r2, r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	e002      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 80c4 	bne.w	80021c8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	785b      	ldrb	r3, [r3, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d126      	bne.n	8002096 <HAL_PCD_EP_DB_Transmit+0x456>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	4413      	add	r3, r2
 800205e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	011a      	lsls	r2, r3, #4
 8002066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002068:	4413      	add	r3, r2
 800206a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800206e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800207a:	b29a      	uxth	r2, r3
 800207c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800207e:	801a      	strh	r2, [r3, #0]
 8002080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800208e:	b29a      	uxth	r2, r3
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	e01a      	b.n	80020cc <HAL_PCD_EP_DB_Transmit+0x48c>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d116      	bne.n	80020cc <HAL_PCD_EP_DB_Transmit+0x48c>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	677b      	str	r3, [r7, #116]	; 0x74
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b2:	4413      	add	r3, r2
 80020b4:	677b      	str	r3, [r7, #116]	; 0x74
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	011a      	lsls	r2, r3, #4
 80020bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020c4:	673b      	str	r3, [r7, #112]	; 0x70
 80020c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c8:	2200      	movs	r2, #0
 80020ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d12f      	bne.n	800213a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020f2:	4413      	add	r3, r2
 80020f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	011a      	lsls	r2, r3, #4
 80020fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002102:	4413      	add	r3, r2
 8002104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800210c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002118:	b29a      	uxth	r2, r3
 800211a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800212c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002130:	b29a      	uxth	r2, r3
 8002132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	e017      	b.n	800216a <HAL_PCD_EP_DB_Transmit+0x52a>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d113      	bne.n	800216a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002150:	4413      	add	r3, r2
 8002152:	67bb      	str	r3, [r7, #120]	; 0x78
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	011a      	lsls	r2, r3, #4
 800215a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800215c:	4413      	add	r3, r2
 800215e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002166:	2200      	movs	r2, #0
 8002168:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f004 fe60 	bl	8006e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 8104 	bne.w	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	441a      	add	r2, r3
 80021ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	8013      	strh	r3, [r2, #0]
 80021c6:	e0e0      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d121      	bne.n	8002216 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800220a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800220e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002212:	b29b      	uxth	r3, r3
 8002214:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800221c:	2b01      	cmp	r3, #1
 800221e:	f040 80b4 	bne.w	800238a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800222a:	441a      	add	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002238:	441a      	add	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	429a      	cmp	r2, r3
 8002248:	d309      	bcc.n	800225e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002256:	1ad2      	subs	r2, r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	621a      	str	r2, [r3, #32]
 800225c:	e015      	b.n	800228a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800226a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002274:	e009      	b.n	800228a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	667b      	str	r3, [r7, #100]	; 0x64
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d155      	bne.n	8002344 <HAL_PCD_EP_DB_Transmit+0x704>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ac:	4413      	add	r3, r2
 80022ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	011a      	lsls	r2, r3, #4
 80022b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b8:	4413      	add	r3, r2
 80022ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022be:	65bb      	str	r3, [r7, #88]	; 0x58
 80022c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d112      	bne.n	80022ec <HAL_PCD_EP_DB_Transmit+0x6ac>
 80022c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e8:	801a      	strh	r2, [r3, #0]
 80022ea:	e044      	b.n	8002376 <HAL_PCD_EP_DB_Transmit+0x736>
 80022ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ee:	2b3e      	cmp	r3, #62	; 0x3e
 80022f0:	d811      	bhi.n	8002316 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80022f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	657b      	str	r3, [r7, #84]	; 0x54
 80022f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002304:	3301      	adds	r3, #1
 8002306:	657b      	str	r3, [r7, #84]	; 0x54
 8002308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230a:	b29b      	uxth	r3, r3
 800230c:	029b      	lsls	r3, r3, #10
 800230e:	b29a      	uxth	r2, r3
 8002310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002312:	801a      	strh	r2, [r3, #0]
 8002314:	e02f      	b.n	8002376 <HAL_PCD_EP_DB_Transmit+0x736>
 8002316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
 800231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	3b01      	subs	r3, #1
 800232a:	657b      	str	r3, [r7, #84]	; 0x54
 800232c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232e:	b29b      	uxth	r3, r3
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	b29b      	uxth	r3, r3
 8002334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800233c:	b29a      	uxth	r2, r3
 800233e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	e018      	b.n	8002376 <HAL_PCD_EP_DB_Transmit+0x736>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d114      	bne.n	8002376 <HAL_PCD_EP_DB_Transmit+0x736>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800235a:	4413      	add	r3, r2
 800235c:	667b      	str	r3, [r7, #100]	; 0x64
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	011a      	lsls	r2, r3, #4
 8002364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002366:	4413      	add	r3, r2
 8002368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800236c:	663b      	str	r3, [r7, #96]	; 0x60
 800236e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002370:	b29a      	uxth	r2, r3
 8002372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002374:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6959      	ldr	r1, [r3, #20]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	895a      	ldrh	r2, [r3, #10]
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	b29b      	uxth	r3, r3
 8002386:	f002 ff04 	bl	8005192 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a4:	823b      	strh	r3, [r7, #16]
 80023a6:	8a3b      	ldrh	r3, [r7, #16]
 80023a8:	f083 0310 	eor.w	r3, r3, #16
 80023ac:	823b      	strh	r3, [r7, #16]
 80023ae:	8a3b      	ldrh	r3, [r7, #16]
 80023b0:	f083 0320 	eor.w	r3, r3, #32
 80023b4:	823b      	strh	r3, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	8a3b      	ldrh	r3, [r7, #16]
 80023c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3788      	adds	r7, #136	; 0x88
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	4613      	mov	r3, r2
 80023f4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e009      	b.n	800242e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800241a:	897a      	ldrh	r2, [r7, #10]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800242e:	893b      	ldrh	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	b29a      	uxth	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	80da      	strh	r2, [r3, #6]
 8002442:	e00b      	b.n	800245c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2201      	movs	r2, #1
 8002448:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	b29a      	uxth	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	b29a      	uxth	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e26c      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002488:	4b92      	ldr	r3, [pc, #584]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	d00c      	beq.n	80024ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002494:	4b8f      	ldr	r3, [pc, #572]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d112      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
 80024a0:	4b8c      	ldr	r3, [pc, #560]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b89      	ldr	r3, [pc, #548]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06c      	beq.n	8002594 <HAL_RCC_OscConfig+0x12c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d168      	bne.n	8002594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e246      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x76>
 80024d0:	4b80      	ldr	r3, [pc, #512]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a7f      	ldr	r2, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e02e      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7a      	ldr	r2, [pc, #488]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b78      	ldr	r3, [pc, #480]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a77      	ldr	r2, [pc, #476]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e01d      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0xbc>
 800250a:	4b72      	ldr	r3, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a71      	ldr	r2, [pc, #452]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002524:	4b6b      	ldr	r3, [pc, #428]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6a      	ldr	r2, [pc, #424]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b68      	ldr	r3, [pc, #416]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a67      	ldr	r2, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fd ffda 	bl	80004fc <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fd ffd6 	bl	80004fc <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1fa      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0xe4>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fd ffc6 	bl	80004fc <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fd ffc2 	bl	80004fc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1e6      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x10c>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d063      	beq.n	800266a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a2:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x18c>
 80025ba:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x176>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1ba      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4939      	ldr	r1, [pc, #228]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	e03a      	b.n	800266a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCC_OscConfig+0x270>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fd ff7b 	bl	80004fc <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7fd ff77 	bl	80004fc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e19b      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4927      	ldr	r1, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_RCC_OscConfig+0x270>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fd ff5a 	bl	80004fc <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264c:	f7fd ff56 	bl	80004fc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e17a      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03a      	beq.n	80026ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d019      	beq.n	80026b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_RCC_OscConfig+0x274>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002684:	f7fd ff3a 	bl	80004fc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7fd ff36 	bl	80004fc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e15a      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 faa6 	bl	8002bfc <RCC_Delay>
 80026b0:	e01c      	b.n	80026ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_OscConfig+0x274>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fd ff20 	bl	80004fc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fd ff1c 	bl	80004fc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d908      	bls.n	80026e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e140      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	42420000 	.word	0x42420000
 80026dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b9e      	ldr	r3, [pc, #632]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e9      	bne.n	80026c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a6 	beq.w	8002846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b97      	ldr	r3, [pc, #604]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	4b94      	ldr	r3, [pc, #592]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a93      	ldr	r2, [pc, #588]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b91      	ldr	r3, [pc, #580]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b8e      	ldr	r3, [pc, #568]	; (8002960 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a8a      	ldr	r2, [pc, #552]	; (8002960 <HAL_RCC_OscConfig+0x4f8>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fd fedd 	bl	80004fc <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fd fed9 	bl	80004fc <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	; 0x64
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0fd      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b81      	ldr	r3, [pc, #516]	; (8002960 <HAL_RCC_OscConfig+0x4f8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x312>
 800276c:	4b7b      	ldr	r3, [pc, #492]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a7a      	ldr	r2, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	e02d      	b.n	80027d6 <HAL_RCC_OscConfig+0x36e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x334>
 8002782:	4b76      	ldr	r3, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a75      	ldr	r2, [pc, #468]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a72      	ldr	r2, [pc, #456]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	e01c      	b.n	80027d6 <HAL_RCC_OscConfig+0x36e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x356>
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a6c      	ldr	r2, [pc, #432]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6213      	str	r3, [r2, #32]
 80027b0:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0x36e>
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a66      	ldr	r2, [pc, #408]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	4b64      	ldr	r3, [pc, #400]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a63      	ldr	r2, [pc, #396]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fd fe8d 	bl	80004fc <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fd fe89 	bl	80004fc <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0ab      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	4b57      	ldr	r3, [pc, #348]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ee      	beq.n	80027e6 <HAL_RCC_OscConfig+0x37e>
 8002808:	e014      	b.n	8002834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fd fe77 	bl	80004fc <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fd fe73 	bl	80004fc <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e095      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b48      	ldr	r3, [pc, #288]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8081 	beq.w	8002952 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d061      	beq.n	8002920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d146      	bne.n	80028f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCC_OscConfig+0x4fc>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fd fe47 	bl	80004fc <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7fd fe43 	bl	80004fc <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e067      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d108      	bne.n	80028ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800289a:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	492d      	ldr	r1, [pc, #180]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a19      	ldr	r1, [r3, #32]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	430b      	orrs	r3, r1
 80028be:	4927      	ldr	r1, [pc, #156]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_RCC_OscConfig+0x4fc>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fd fe17 	bl	80004fc <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fd fe13 	bl	80004fc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e037      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x46a>
 80028f0:	e02f      	b.n	8002952 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_RCC_OscConfig+0x4fc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fd fe00 	bl	80004fc <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fd fdfc 	bl	80004fc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e020      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x498>
 800291e:	e018      	b.n	8002952 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e013      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x4f4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	429a      	cmp	r2, r3
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
 8002964:	42420060 	.word	0x42420060

08002968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0d0      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d910      	bls.n	80029ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b67      	ldr	r3, [pc, #412]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4965      	ldr	r1, [pc, #404]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d040      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d115      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e073      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06b      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4936      	ldr	r1, [pc, #216]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a58:	f7fd fd50 	bl	80004fc <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a60:	f7fd fd4c 	bl	80004fc <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e053      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 020c 	and.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1eb      	bne.n	8002a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d210      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 0207 	bic.w	r2, r3, #7
 8002a9e:	4922      	ldr	r1, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1cc>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fcae 	bl	8000478 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	080073bc 	.word	0x080073bc
 8002b34:	20000004 	.word	0x20000004
 8002b38:	20000008 	.word	0x20000008

08002b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b490      	push	{r4, r7}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b44:	1d3c      	adds	r4, r7, #4
 8002b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b4c:	f240 2301 	movw	r3, #513	; 0x201
 8002b50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x40>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0x46>
 8002b7a:	e02d      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7e:	623b      	str	r3, [r7, #32]
      break;
 8002b80:	e02d      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	0c9b      	lsrs	r3, r3, #18
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b8e:	4413      	add	r3, r2
 8002b90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0c5b      	lsrs	r3, r3, #17
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bae:	4413      	add	r3, r2
 8002bb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bba:	fb02 f203 	mul.w	r2, r2, r3
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e004      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	623b      	str	r3, [r7, #32]
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bda:	623b      	str	r3, [r7, #32]
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3728      	adds	r7, #40	; 0x28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc90      	pop	{r4, r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	08007370 	.word	0x08007370
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	007a1200 	.word	0x007a1200
 8002bf8:	003d0900 	.word	0x003d0900

08002bfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <RCC_Delay+0x34>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <RCC_Delay+0x38>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c18:	bf00      	nop
  }
  while (Delay --);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f9      	bne.n	8002c18 <RCC_Delay+0x1c>
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000004 	.word	0x20000004
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d07d      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c58:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	61d3      	str	r3, [r2, #28]
 8002c70:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d118      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c98:	f7fd fc30 	bl	80004fc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fd fc2c 	bl	80004fc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e06d      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02e      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d027      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d014      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fd fbfb 	bl	80004fc <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fd fbf7 	bl	80004fc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e036      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ee      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4917      	ldr	r1, [pc, #92]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	490b      	ldr	r1, [pc, #44]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4904      	ldr	r1, [pc, #16]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42420440 	.word	0x42420440

08002da4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002da4:	b084      	sub	sp, #16
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	f107 0014 	add.w	r0, r7, #20
 8002db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	b004      	add	sp, #16
 8002dc2:	4770      	bx	lr

08002dc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002dd4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002dd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002df8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002dfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	f107 0014 	add.w	r0, r7, #20
 8002e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	b004      	add	sp, #16
 8002e7a:	4770      	bx	lr

08002e7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b09b      	sub	sp, #108	; 0x6c
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	78db      	ldrb	r3, [r3, #3]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d81f      	bhi.n	8002eee <USB_ActivateEndpoint+0x72>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <USB_ActivateEndpoint+0x38>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ef7 	.word	0x08002ef7
 8002ec0:	08002ed3 	.word	0x08002ed3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ec4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ecc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ed0:	e012      	b.n	8002ef8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ed2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ed6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002eda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ede:	e00b      	b.n	8002ef8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ee0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002eec:	e004      	b.n	8002ef8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ef4:	e000      	b.n	8002ef8 <USB_ActivateEndpoint+0x7c>
      break;
 8002ef6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	7b1b      	ldrb	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 8149 	bne.w	80031fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8084 	beq.w	800307c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4413      	add	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	011a      	lsls	r2, r3, #4
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	88db      	ldrh	r3, [r3, #6]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	81fb      	strh	r3, [r7, #14]
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <USB_ActivateEndpoint+0x17c>
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	81bb      	strh	r3, [r7, #12]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	89bb      	ldrh	r3, [r7, #12]
 8002fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d020      	beq.n	8003042 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003016:	813b      	strh	r3, [r7, #8]
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	f083 0320 	eor.w	r3, r3, #32
 800301e:	813b      	strh	r3, [r7, #8]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	893b      	ldrh	r3, [r7, #8]
 800302c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	b29b      	uxth	r3, r3
 800303e:	8013      	strh	r3, [r2, #0]
 8003040:	e27f      	b.n	8003542 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]
 800307a:	e262      	b.n	8003542 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	4413      	add	r3, r2
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	011a      	lsls	r2, r3, #4
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	4413      	add	r3, r2
 800309a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	88db      	ldrh	r3, [r3, #6]
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	4413      	add	r3, r2
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	011a      	lsls	r2, r3, #4
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	4413      	add	r3, r2
 80030ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d112      	bne.n	8003102 <USB_ActivateEndpoint+0x286>
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e02f      	b.n	8003162 <USB_ActivateEndpoint+0x2e6>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b3e      	cmp	r3, #62	; 0x3e
 8003108:	d813      	bhi.n	8003132 <USB_ActivateEndpoint+0x2b6>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	663b      	str	r3, [r7, #96]	; 0x60
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <USB_ActivateEndpoint+0x2a8>
 800311e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003120:	3301      	adds	r3, #1
 8003122:	663b      	str	r3, [r7, #96]	; 0x60
 8003124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003126:	b29b      	uxth	r3, r3
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	b29a      	uxth	r2, r3
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	e017      	b.n	8003162 <USB_ActivateEndpoint+0x2e6>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	663b      	str	r3, [r7, #96]	; 0x60
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <USB_ActivateEndpoint+0x2d0>
 8003146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003148:	3b01      	subs	r3, #1
 800314a:	663b      	str	r3, [r7, #96]	; 0x60
 800314c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314e:	b29b      	uxth	r3, r3
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	b29b      	uxth	r3, r3
 8003154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800315c:	b29a      	uxth	r2, r3
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	83fb      	strh	r3, [r7, #30]
 8003170:	8bfb      	ldrh	r3, [r7, #30]
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01b      	beq.n	80031b2 <USB_ActivateEndpoint+0x336>
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	83bb      	strh	r3, [r7, #28]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	441a      	add	r2, r3
 800319c:	8bbb      	ldrh	r3, [r7, #28]
 800319e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	837b      	strh	r3, [r7, #26]
 80031ca:	8b7b      	ldrh	r3, [r7, #26]
 80031cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031d0:	837b      	strh	r3, [r7, #26]
 80031d2:	8b7b      	ldrh	r3, [r7, #26]
 80031d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031d8:	837b      	strh	r3, [r7, #26]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	8b7b      	ldrh	r3, [r7, #26]
 80031e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	8013      	strh	r3, [r2, #0]
 80031fa:	e1a2      	b.n	8003542 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003212:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003234:	b29b      	uxth	r3, r3
 8003236:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65bb      	str	r3, [r7, #88]	; 0x58
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003242:	b29b      	uxth	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003248:	4413      	add	r3, r2
 800324a:	65bb      	str	r3, [r7, #88]	; 0x58
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	011a      	lsls	r2, r3, #4
 8003252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003254:	4413      	add	r3, r2
 8003256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800325a:	657b      	str	r3, [r7, #84]	; 0x54
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	891b      	ldrh	r3, [r3, #8]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	653b      	str	r3, [r7, #80]	; 0x50
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327c:	4413      	add	r3, r2
 800327e:	653b      	str	r3, [r7, #80]	; 0x50
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	011a      	lsls	r2, r3, #4
 8003286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003288:	4413      	add	r3, r2
 800328a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	895b      	ldrh	r3, [r3, #10]
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 8091 	bne.w	80033cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01b      	beq.n	80032fa <USB_ActivateEndpoint+0x47e>
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	441a      	add	r2, r3
 80032e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80032e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	873b      	strh	r3, [r7, #56]	; 0x38
 8003308:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01b      	beq.n	800334a <USB_ActivateEndpoint+0x4ce>
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003328:	86fb      	strh	r3, [r7, #54]	; 0x36
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	441a      	add	r2, r3
 8003334:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003342:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003346:	b29b      	uxth	r3, r3
 8003348:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003362:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003364:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003368:	86bb      	strh	r3, [r7, #52]	; 0x34
 800336a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800336c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003370:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800337e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338e:	b29b      	uxth	r3, r3
 8003390:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	441a      	add	r2, r3
 80033b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	8013      	strh	r3, [r2, #0]
 80033ca:	e0ba      	b.n	8003542 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80033dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01d      	beq.n	8003424 <USB_ActivateEndpoint+0x5a8>
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003434:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01d      	beq.n	800347c <USB_ActivateEndpoint+0x600>
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	441a      	add	r2, r3
 8003464:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003478:	b29b      	uxth	r3, r3
 800347a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d024      	beq.n	80034ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800349e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034a2:	f083 0320 	eor.w	r3, r3, #32
 80034a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	8013      	strh	r3, [r2, #0]
 80034cc:	e01d      	b.n	800350a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003506:	b29b      	uxth	r3, r3
 8003508:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800352e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003546:	4618      	mov	r0, r3
 8003548:	376c      	adds	r7, #108	; 0x6c
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003550:	b480      	push	{r7}
 8003552:	b08d      	sub	sp, #52	; 0x34
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	7b1b      	ldrb	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 808e 	bne.w	8003680 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	785b      	ldrb	r3, [r3, #1]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d044      	beq.n	80035f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	81bb      	strh	r3, [r7, #12]
 800357a:	89bb      	ldrh	r3, [r7, #12]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <USB_DeactivateEndpoint+0x6c>
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	817b      	strh	r3, [r7, #10]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d2:	813b      	strh	r3, [r7, #8]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]
 80035f4:	e192      	b.n	800391c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	827b      	strh	r3, [r7, #18]
 8003604:	8a7b      	ldrh	r3, [r7, #18]
 8003606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01b      	beq.n	8003646 <USB_DeactivateEndpoint+0xf6>
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	823b      	strh	r3, [r7, #16]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	8a3b      	ldrh	r3, [r7, #16]
 8003632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800363e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003642:	b29b      	uxth	r3, r3
 8003644:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	81fb      	strh	r3, [r7, #14]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	b29b      	uxth	r3, r3
 800367c:	8013      	strh	r3, [r2, #0]
 800367e:	e14d      	b.n	800391c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f040 80a5 	bne.w	80037d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	843b      	strh	r3, [r7, #32]
 8003698:	8c3b      	ldrh	r3, [r7, #32]
 800369a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01b      	beq.n	80036da <USB_DeactivateEndpoint+0x18a>
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	83fb      	strh	r3, [r7, #30]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	8bfb      	ldrh	r3, [r7, #30]
 80036c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	83bb      	strh	r3, [r7, #28]
 80036e8:	8bbb      	ldrh	r3, [r7, #28]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01b      	beq.n	800372a <USB_DeactivateEndpoint+0x1da>
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	837b      	strh	r3, [r7, #26]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	441a      	add	r2, r3
 8003714:	8b7b      	ldrh	r3, [r7, #26]
 8003716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003726:	b29b      	uxth	r3, r3
 8003728:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003740:	833b      	strh	r3, [r7, #24]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	8b3b      	ldrh	r3, [r7, #24]
 800374e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800375e:	b29b      	uxth	r3, r3
 8003760:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	82fb      	strh	r3, [r7, #22]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	441a      	add	r2, r3
 8003784:	8afb      	ldrh	r3, [r7, #22]
 8003786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800378a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003796:	b29b      	uxth	r3, r3
 8003798:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	82bb      	strh	r3, [r7, #20]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	8abb      	ldrh	r3, [r7, #20]
 80037be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	8013      	strh	r3, [r2, #0]
 80037d2:	e0a3      	b.n	800391c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <USB_DeactivateEndpoint+0x2d4>
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800381c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003820:	b29b      	uxth	r3, r3
 8003822:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <USB_DeactivateEndpoint+0x324>
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	853b      	strh	r3, [r7, #40]	; 0x28
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003870:	b29b      	uxth	r3, r3
 8003872:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3734      	adds	r7, #52	; 0x34
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b0cc      	sub	sp, #304	; 0x130
 800392c:	af00      	add	r7, sp, #0
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	6018      	str	r0, [r3, #0]
 8003932:	463b      	mov	r3, r7
 8003934:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b01      	cmp	r3, #1
 800393e:	f040 872e 	bne.w	800479e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003942:	463b      	mov	r3, r7
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	463b      	mov	r3, r7
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d905      	bls.n	800395e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003952:	463b      	mov	r3, r7
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800395c:	e004      	b.n	8003968 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003968:	463b      	mov	r3, r7
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	7b1b      	ldrb	r3, [r3, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d134      	bne.n	80039dc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003972:	463b      	mov	r3, r7
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6959      	ldr	r1, [r3, #20]
 8003978:	463b      	mov	r3, r7
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	88da      	ldrh	r2, [r3, #6]
 800397e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003982:	b29b      	uxth	r3, r3
 8003984:	1d38      	adds	r0, r7, #4
 8003986:	6800      	ldr	r0, [r0, #0]
 8003988:	f001 fc03 	bl	8005192 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800398c:	f107 0310 	add.w	r3, r7, #16
 8003990:	1d3a      	adds	r2, r7, #4
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	f107 0310 	add.w	r3, r7, #16
 80039a6:	f107 0210 	add.w	r2, r7, #16
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	440a      	add	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	463b      	mov	r3, r7
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	011a      	lsls	r2, r3, #4
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	801a      	strh	r2, [r3, #0]
 80039d8:	f000 beac 	b.w	8004734 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80039dc:	463b      	mov	r3, r7
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	78db      	ldrb	r3, [r3, #3]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	f040 838c 	bne.w	8004100 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80039e8:	463b      	mov	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	463b      	mov	r3, r7
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	f240 8330 	bls.w	800405a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	463b      	mov	r3, r7
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a3e:	463b      	mov	r3, r7
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	463b      	mov	r3, r7
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 819e 	beq.w	8003da8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a70:	1d3a      	adds	r2, r7, #4
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	463b      	mov	r3, r7
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d17a      	bne.n	8003b76 <USB_EPStartXfer+0x24e>
 8003a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a84:	1d3a      	adds	r2, r7, #4
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4619      	mov	r1, r3
 8003a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	011a      	lsls	r2, r3, #4
 8003aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11a      	bne.n	8003afc <USB_EPStartXfer+0x1d4>
 8003ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	e062      	b.n	8003bc2 <USB_EPStartXfer+0x29a>
 8003afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b00:	2b3e      	cmp	r3, #62	; 0x3e
 8003b02:	d819      	bhi.n	8003b38 <USB_EPStartXfer+0x210>
 8003b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <USB_EPStartXfer+0x1fc>
 8003b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	029b      	lsls	r3, r3, #10
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	e044      	b.n	8003bc2 <USB_EPStartXfer+0x29a>
 8003b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <USB_EPStartXfer+0x230>
 8003b4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b52:	3b01      	subs	r3, #1
 8003b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	e025      	b.n	8003bc2 <USB_EPStartXfer+0x29a>
 8003b76:	463b      	mov	r3, r7
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d120      	bne.n	8003bc2 <USB_EPStartXfer+0x29a>
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	440a      	add	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	011a      	lsls	r2, r3, #4
 8003ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	895b      	ldrh	r3, [r3, #10]
 8003bc8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bcc:	463b      	mov	r3, r7
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6959      	ldr	r1, [r3, #20]
 8003bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003bdc:	1d38      	adds	r0, r7, #4
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	f001 fad7 	bl	8005192 <USB_WritePMA>
            ep->xfer_buff += len;
 8003be4:	463b      	mov	r3, r7
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bee:	441a      	add	r2, r3
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d909      	bls.n	8003c1a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8003c06:	463b      	mov	r3, r7
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	463b      	mov	r3, r7
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	621a      	str	r2, [r3, #32]
 8003c18:	e008      	b.n	8003c2c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003c24:	463b      	mov	r3, r7
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d17a      	bne.n	8003d2c <USB_EPStartXfer+0x404>
 8003c36:	f107 0318 	add.w	r3, r7, #24
 8003c3a:	1d3a      	adds	r2, r7, #4
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	f107 0218 	add.w	r2, r7, #24
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	440a      	add	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	011a      	lsls	r2, r3, #4
 8003c62:	f107 0318 	add.w	r3, r7, #24
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11a      	bne.n	8003cb2 <USB_EPStartXfer+0x38a>
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	801a      	strh	r2, [r3, #0]
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	e067      	b.n	8003d82 <USB_EPStartXfer+0x45a>
 8003cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003cb8:	d819      	bhi.n	8003cee <USB_EPStartXfer+0x3c6>
 8003cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <USB_EPStartXfer+0x3b2>
 8003cd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	029b      	lsls	r3, r3, #10
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	e049      	b.n	8003d82 <USB_EPStartXfer+0x45a>
 8003cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <USB_EPStartXfer+0x3e6>
 8003d04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	f107 0314 	add.w	r3, r7, #20
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	e02a      	b.n	8003d82 <USB_EPStartXfer+0x45a>
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d125      	bne.n	8003d82 <USB_EPStartXfer+0x45a>
 8003d36:	f107 0320 	add.w	r3, r7, #32
 8003d3a:	1d3a      	adds	r2, r7, #4
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	1d3b      	adds	r3, r7, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f107 0320 	add.w	r3, r7, #32
 8003d50:	f107 0220 	add.w	r2, r7, #32
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	440a      	add	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	011a      	lsls	r2, r3, #4
 8003d62:	f107 0320 	add.w	r3, r7, #32
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003d6e:	f107 031c 	add.w	r3, r7, #28
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	f107 031c 	add.w	r3, r7, #28
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d82:	463b      	mov	r3, r7
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	891b      	ldrh	r3, [r3, #8]
 8003d88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6959      	ldr	r1, [r3, #20]
 8003d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d9c:	1d38      	adds	r0, r7, #4
 8003d9e:	6800      	ldr	r0, [r0, #0]
 8003da0:	f001 f9f7 	bl	8005192 <USB_WritePMA>
 8003da4:	f000 bcc6 	b.w	8004734 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003da8:	463b      	mov	r3, r7
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d164      	bne.n	8003e7c <USB_EPStartXfer+0x554>
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc6:	4413      	add	r3, r2
 8003dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dca:	463b      	mov	r3, r7
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	011a      	lsls	r2, r3, #4
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dda:	647b      	str	r3, [r7, #68]	; 0x44
 8003ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d112      	bne.n	8003e0a <USB_EPStartXfer+0x4e2>
 8003de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	e057      	b.n	8003eba <USB_EPStartXfer+0x592>
 8003e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e10:	d817      	bhi.n	8003e42 <USB_EPStartXfer+0x51a>
 8003e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <USB_EPStartXfer+0x50a>
 8003e28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	029b      	lsls	r3, r3, #10
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e03b      	b.n	8003eba <USB_EPStartXfer+0x592>
 8003e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <USB_EPStartXfer+0x53a>
 8003e58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e01e      	b.n	8003eba <USB_EPStartXfer+0x592>
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d119      	bne.n	8003eba <USB_EPStartXfer+0x592>
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9a:	4413      	add	r3, r2
 8003e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	011a      	lsls	r2, r3, #4
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003eba:	463b      	mov	r3, r7
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	891b      	ldrh	r3, [r3, #8]
 8003ec0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6959      	ldr	r1, [r3, #20]
 8003eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ed4:	1d38      	adds	r0, r7, #4
 8003ed6:	6800      	ldr	r0, [r0, #0]
 8003ed8:	f001 f95b 	bl	8005192 <USB_WritePMA>
            ep->xfer_buff += len;
 8003edc:	463b      	mov	r3, r7
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee6:	441a      	add	r2, r3
 8003ee8:	463b      	mov	r3, r7
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003eee:	463b      	mov	r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d909      	bls.n	8003f12 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003efe:	463b      	mov	r3, r7
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1a      	ldr	r2, [r3, #32]
 8003f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f08:	1ad2      	subs	r2, r2, r3
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	621a      	str	r2, [r3, #32]
 8003f10:	e008      	b.n	8003f24 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f12:	463b      	mov	r3, r7
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d164      	bne.n	8003ffe <USB_EPStartXfer+0x6d6>
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	4413      	add	r3, r2
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	011a      	lsls	r2, r3, #4
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	4413      	add	r3, r2
 8003f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d112      	bne.n	8003f8c <USB_EPStartXfer+0x664>
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	e054      	b.n	8004036 <USB_EPStartXfer+0x70e>
 8003f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f90:	2b3e      	cmp	r3, #62	; 0x3e
 8003f92:	d817      	bhi.n	8003fc4 <USB_EPStartXfer+0x69c>
 8003f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <USB_EPStartXfer+0x68c>
 8003faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e038      	b.n	8004036 <USB_EPStartXfer+0x70e>
 8003fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <USB_EPStartXfer+0x6bc>
 8003fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	029b      	lsls	r3, r3, #10
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	e01b      	b.n	8004036 <USB_EPStartXfer+0x70e>
 8003ffe:	463b      	mov	r3, r7
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d116      	bne.n	8004036 <USB_EPStartXfer+0x70e>
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004016:	4413      	add	r3, r2
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
 800401a:	463b      	mov	r3, r7
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	011a      	lsls	r2, r3, #4
 8004022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004024:	4413      	add	r3, r2
 8004026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004030:	b29a      	uxth	r2, r3
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	895b      	ldrh	r3, [r3, #10]
 800403c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404a:	b29b      	uxth	r3, r3
 800404c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004050:	1d38      	adds	r0, r7, #4
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	f001 f89d 	bl	8005192 <USB_WritePMA>
 8004058:	e36c      	b.n	8004734 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800405a:	463b      	mov	r3, r7
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	463b      	mov	r3, r7
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	441a      	add	r2, r3
 8004090:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	4413      	add	r3, r2
 80040be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c0:	463b      	mov	r3, r7
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	011a      	lsls	r2, r3, #4
 80040c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ca:	4413      	add	r3, r2
 80040cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040dc:	463b      	mov	r3, r7
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	891b      	ldrh	r3, [r3, #8]
 80040e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040e6:	463b      	mov	r3, r7
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6959      	ldr	r1, [r3, #20]
 80040ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80040f6:	1d38      	adds	r0, r7, #4
 80040f8:	6800      	ldr	r0, [r0, #0]
 80040fa:	f001 f84a 	bl	8005192 <USB_WritePMA>
 80040fe:	e319      	b.n	8004734 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	463b      	mov	r3, r7
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	463b      	mov	r3, r7
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004138:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800413c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004144:	463b      	mov	r3, r7
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800414e:	1ad2      	subs	r2, r2, r3
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	463b      	mov	r3, r7
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8162 	beq.w	8004436 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d164      	bne.n	800424e <USB_EPStartXfer+0x926>
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	67bb      	str	r3, [r7, #120]	; 0x78
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004198:	4413      	add	r3, r2
 800419a:	67bb      	str	r3, [r7, #120]	; 0x78
 800419c:	463b      	mov	r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	011a      	lsls	r2, r3, #4
 80041a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a6:	4413      	add	r3, r2
 80041a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ac:	677b      	str	r3, [r7, #116]	; 0x74
 80041ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d112      	bne.n	80041dc <USB_EPStartXfer+0x8b4>
 80041b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	e057      	b.n	800428c <USB_EPStartXfer+0x964>
 80041dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041e0:	2b3e      	cmp	r3, #62	; 0x3e
 80041e2:	d817      	bhi.n	8004214 <USB_EPStartXfer+0x8ec>
 80041e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80041ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <USB_EPStartXfer+0x8dc>
 80041fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041fe:	3301      	adds	r3, #1
 8004200:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004204:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004208:	b29b      	uxth	r3, r3
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	b29a      	uxth	r2, r3
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e03b      	b.n	800428c <USB_EPStartXfer+0x964>
 8004214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800421e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <USB_EPStartXfer+0x90c>
 800422a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800422e:	3b01      	subs	r3, #1
 8004230:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004234:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004238:	b29b      	uxth	r3, r3
 800423a:	029b      	lsls	r3, r3, #10
 800423c:	b29b      	uxth	r3, r3
 800423e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004246:	b29a      	uxth	r2, r3
 8004248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e01e      	b.n	800428c <USB_EPStartXfer+0x964>
 800424e:	463b      	mov	r3, r7
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d119      	bne.n	800428c <USB_EPStartXfer+0x964>
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004260:	b29b      	uxth	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004268:	4413      	add	r3, r2
 800426a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800426e:	463b      	mov	r3, r7
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	011a      	lsls	r2, r3, #4
 8004276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800427a:	4413      	add	r3, r2
 800427c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004280:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004286:	b29a      	uxth	r2, r3
 8004288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800428a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800428c:	463b      	mov	r3, r7
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	895b      	ldrh	r3, [r3, #10]
 8004292:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004296:	463b      	mov	r3, r7
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6959      	ldr	r1, [r3, #20]
 800429c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042a6:	1d38      	adds	r0, r7, #4
 80042a8:	6800      	ldr	r0, [r0, #0]
 80042aa:	f000 ff72 	bl	8005192 <USB_WritePMA>
          ep->xfer_buff += len;
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b8:	441a      	add	r2, r3
 80042ba:	463b      	mov	r3, r7
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80042c0:	463b      	mov	r3, r7
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d909      	bls.n	80042e4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80042d0:	463b      	mov	r3, r7
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	463b      	mov	r3, r7
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	621a      	str	r2, [r3, #32]
 80042e2:	e008      	b.n	80042f6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80042e4:	463b      	mov	r3, r7
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80042ee:	463b      	mov	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80042f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 821a 	beq.w	8004734 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d164      	bne.n	80043d4 <USB_EPStartXfer+0xaac>
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004318:	b29b      	uxth	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431e:	4413      	add	r3, r2
 8004320:	66bb      	str	r3, [r7, #104]	; 0x68
 8004322:	463b      	mov	r3, r7
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432c:	4413      	add	r3, r2
 800432e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004332:	667b      	str	r3, [r7, #100]	; 0x64
 8004334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d112      	bne.n	8004362 <USB_EPStartXfer+0xa3a>
 800433c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004346:	b29a      	uxth	r2, r3
 8004348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435a:	b29a      	uxth	r2, r3
 800435c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	e057      	b.n	8004412 <USB_EPStartXfer+0xaea>
 8004362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004366:	2b3e      	cmp	r3, #62	; 0x3e
 8004368:	d817      	bhi.n	800439a <USB_EPStartXfer+0xa72>
 800436a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <USB_EPStartXfer+0xa62>
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	3301      	adds	r3, #1
 8004386:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	b29b      	uxth	r3, r3
 8004390:	029b      	lsls	r3, r3, #10
 8004392:	b29a      	uxth	r2, r3
 8004394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e03b      	b.n	8004412 <USB_EPStartXfer+0xaea>
 800439a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <USB_EPStartXfer+0xa92>
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	3b01      	subs	r3, #1
 80043b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	b29b      	uxth	r3, r3
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	e01e      	b.n	8004412 <USB_EPStartXfer+0xaea>
 80043d4:	463b      	mov	r3, r7
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d119      	bne.n	8004412 <USB_EPStartXfer+0xaea>
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	673b      	str	r3, [r7, #112]	; 0x70
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f2:	4413      	add	r3, r2
 80043f4:	673b      	str	r3, [r7, #112]	; 0x70
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004400:	4413      	add	r3, r2
 8004402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800440c:	b29a      	uxth	r2, r3
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	891b      	ldrh	r3, [r3, #8]
 8004418:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800441c:	463b      	mov	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6959      	ldr	r1, [r3, #20]
 8004422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004426:	b29b      	uxth	r3, r3
 8004428:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800442c:	1d38      	adds	r0, r7, #4
 800442e:	6800      	ldr	r0, [r0, #0]
 8004430:	f000 feaf 	bl	8005192 <USB_WritePMA>
 8004434:	e17e      	b.n	8004734 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004436:	463b      	mov	r3, r7
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d16f      	bne.n	8004520 <USB_EPStartXfer+0xbf8>
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004450:	b29b      	uxth	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004458:	4413      	add	r3, r2
 800445a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800446a:	4413      	add	r3, r2
 800446c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <USB_EPStartXfer+0xb82>
 800447c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004488:	b29a      	uxth	r2, r3
 800448a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	e05f      	b.n	800456a <USB_EPStartXfer+0xc42>
 80044aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ae:	2b3e      	cmp	r3, #62	; 0x3e
 80044b0:	d818      	bhi.n	80044e4 <USB_EPStartXfer+0xbbc>
 80044b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <USB_EPStartXfer+0xbaa>
 80044c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044cc:	3301      	adds	r3, #1
 80044ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	b29a      	uxth	r2, r3
 80044dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	e042      	b.n	800456a <USB_EPStartXfer+0xc42>
 80044e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <USB_EPStartXfer+0xbdc>
 80044fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044fe:	3b01      	subs	r3, #1
 8004500:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004504:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004508:	b29b      	uxth	r3, r3
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	b29b      	uxth	r3, r3
 800450e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004516:	b29a      	uxth	r2, r3
 8004518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	e024      	b.n	800456a <USB_EPStartXfer+0xc42>
 8004520:	463b      	mov	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d11f      	bne.n	800456a <USB_EPStartXfer+0xc42>
 800452a:	1d3b      	adds	r3, r7, #4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004542:	4413      	add	r3, r2
 8004544:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004548:	463b      	mov	r3, r7
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	011a      	lsls	r2, r3, #4
 8004550:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004554:	4413      	add	r3, r2
 8004556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800455a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800455e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004562:	b29a      	uxth	r2, r3
 8004564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004568:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800456a:	463b      	mov	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	891b      	ldrh	r3, [r3, #8]
 8004570:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6959      	ldr	r1, [r3, #20]
 800457a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800457e:	b29b      	uxth	r3, r3
 8004580:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004584:	1d38      	adds	r0, r7, #4
 8004586:	6800      	ldr	r0, [r0, #0]
 8004588:	f000 fe03 	bl	8005192 <USB_WritePMA>
          ep->xfer_buff += len;
 800458c:	463b      	mov	r3, r7
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004596:	441a      	add	r2, r3
 8004598:	463b      	mov	r3, r7
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800459e:	463b      	mov	r3, r7
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	463b      	mov	r3, r7
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d909      	bls.n	80045c2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80045ae:	463b      	mov	r3, r7
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a1a      	ldr	r2, [r3, #32]
 80045b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	621a      	str	r2, [r3, #32]
 80045c0:	e008      	b.n	80045d4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80045c2:	463b      	mov	r3, r7
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80045cc:	463b      	mov	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2200      	movs	r2, #0
 80045d2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80045d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80ab 	beq.w	8004734 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045e6:	463b      	mov	r3, r7
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d16f      	bne.n	80046d0 <USB_EPStartXfer+0xda8>
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004608:	4413      	add	r3, r2
 800460a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800460e:	463b      	mov	r3, r7
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	011a      	lsls	r2, r3, #4
 8004616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800461a:	4413      	add	r3, r2
 800461c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <USB_EPStartXfer+0xd32>
 800462c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004638:	b29a      	uxth	r2, r3
 800463a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004650:	b29a      	uxth	r2, r3
 8004652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	e05b      	b.n	8004712 <USB_EPStartXfer+0xdea>
 800465a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800465e:	2b3e      	cmp	r3, #62	; 0x3e
 8004660:	d818      	bhi.n	8004694 <USB_EPStartXfer+0xd6c>
 8004662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800466c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <USB_EPStartXfer+0xd5a>
 8004678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467c:	3301      	adds	r3, #1
 800467e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004686:	b29b      	uxth	r3, r3
 8004688:	029b      	lsls	r3, r3, #10
 800468a:	b29a      	uxth	r2, r3
 800468c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004690:	801a      	strh	r2, [r3, #0]
 8004692:	e03e      	b.n	8004712 <USB_EPStartXfer+0xdea>
 8004694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800469e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <USB_EPStartXfer+0xd8c>
 80046aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ae:	3b01      	subs	r3, #1
 80046b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	b29b      	uxth	r3, r3
 80046be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e020      	b.n	8004712 <USB_EPStartXfer+0xdea>
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d11b      	bne.n	8004712 <USB_EPStartXfer+0xdea>
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ea:	4413      	add	r3, r2
 80046ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	011a      	lsls	r2, r3, #4
 80046f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046fc:	4413      	add	r3, r2
 80046fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800470a:	b29a      	uxth	r2, r3
 800470c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004710:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004712:	463b      	mov	r3, r7
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	895b      	ldrh	r3, [r3, #10]
 8004718:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800471c:	463b      	mov	r3, r7
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6959      	ldr	r1, [r3, #20]
 8004722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004726:	b29b      	uxth	r3, r3
 8004728:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800472c:	1d38      	adds	r0, r7, #4
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	f000 fd2f 	bl	8005192 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	463b      	mov	r3, r7
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f107 020a 	add.w	r2, r7, #10
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	8013      	strh	r3, [r2, #0]
 8004754:	f107 030a 	add.w	r3, r7, #10
 8004758:	f107 020a 	add.w	r2, r7, #10
 800475c:	8812      	ldrh	r2, [r2, #0]
 800475e:	f082 0210 	eor.w	r2, r2, #16
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	f107 030a 	add.w	r3, r7, #10
 8004768:	f107 020a 	add.w	r2, r7, #10
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	f082 0220 	eor.w	r2, r2, #32
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	463b      	mov	r3, r7
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	f107 030a 	add.w	r3, r7, #10
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]
 800479c:	e3b5      	b.n	8004f0a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800479e:	463b      	mov	r3, r7
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	7b1b      	ldrb	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 8090 	bne.w	80048ca <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80047aa:	463b      	mov	r3, r7
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	463b      	mov	r3, r7
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90e      	bls.n	80047d8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80047ba:	463b      	mov	r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80047c4:	463b      	mov	r3, r7
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	463b      	mov	r3, r7
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	e008      	b.n	80047ea <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80047d8:	463b      	mov	r3, r7
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80047e2:	463b      	mov	r3, r7
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004802:	4413      	add	r3, r2
 8004804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004808:	463b      	mov	r3, r7
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	011a      	lsls	r2, r3, #4
 8004810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004814:	4413      	add	r3, r2
 8004816:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800481e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <USB_EPStartXfer+0xf2c>
 8004826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004832:	b29a      	uxth	r2, r3
 8004834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484a:	b29a      	uxth	r2, r3
 800484c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e32c      	b.n	8004eae <USB_EPStartXfer+0x1586>
 8004854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004858:	2b3e      	cmp	r3, #62	; 0x3e
 800485a:	d818      	bhi.n	800488e <USB_EPStartXfer+0xf66>
 800485c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <USB_EPStartXfer+0xf54>
 8004872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004876:	3301      	adds	r3, #1
 8004878:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800487c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004880:	b29b      	uxth	r3, r3
 8004882:	029b      	lsls	r3, r3, #10
 8004884:	b29a      	uxth	r2, r3
 8004886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800488a:	801a      	strh	r2, [r3, #0]
 800488c:	e30f      	b.n	8004eae <USB_EPStartXfer+0x1586>
 800488e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <USB_EPStartXfer+0xf86>
 80048a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048a8:	3b01      	subs	r3, #1
 80048aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	e2f1      	b.n	8004eae <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80048ca:	463b      	mov	r3, r7
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	78db      	ldrb	r3, [r3, #3]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	f040 818f 	bne.w	8004bf4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80048d6:	463b      	mov	r3, r7
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d175      	bne.n	80049cc <USB_EPStartXfer+0x10a4>
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048f8:	4413      	add	r3, r2
 80048fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048fe:	463b      	mov	r3, r7
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	011a      	lsls	r2, r3, #4
 8004906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800490a:	4413      	add	r3, r2
 800490c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004914:	463b      	mov	r3, r7
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <USB_EPStartXfer+0x1024>
 800491e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800492a:	b29a      	uxth	r2, r3
 800492c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004942:	b29a      	uxth	r2, r3
 8004944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	e065      	b.n	8004a18 <USB_EPStartXfer+0x10f0>
 800494c:	463b      	mov	r3, r7
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b3e      	cmp	r3, #62	; 0x3e
 8004954:	d81a      	bhi.n	800498c <USB_EPStartXfer+0x1064>
 8004956:	463b      	mov	r3, r7
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004962:	463b      	mov	r3, r7
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <USB_EPStartXfer+0x1052>
 8004970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004974:	3301      	adds	r3, #1
 8004976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	b29b      	uxth	r3, r3
 8004980:	029b      	lsls	r3, r3, #10
 8004982:	b29a      	uxth	r2, r3
 8004984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e045      	b.n	8004a18 <USB_EPStartXfer+0x10f0>
 800498c:	463b      	mov	r3, r7
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004998:	463b      	mov	r3, r7
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <USB_EPStartXfer+0x1088>
 80049a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049aa:	3b01      	subs	r3, #1
 80049ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e025      	b.n	8004a18 <USB_EPStartXfer+0x10f0>
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	785b      	ldrb	r3, [r3, #1]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d120      	bne.n	8004a18 <USB_EPStartXfer+0x10f0>
 80049d6:	1d3b      	adds	r3, r7, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ee:	4413      	add	r3, r2
 80049f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049f4:	463b      	mov	r3, r7
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a00:	4413      	add	r3, r2
 8004a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	1d3b      	adds	r3, r7, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a20:	463b      	mov	r3, r7
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d175      	bne.n	8004b16 <USB_EPStartXfer+0x11ee>
 8004a2a:	1d3b      	adds	r3, r7, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a42:	4413      	add	r3, r2
 8004a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a48:	463b      	mov	r3, r7
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	011a      	lsls	r2, r3, #4
 8004a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a5e:	463b      	mov	r3, r7
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d116      	bne.n	8004a96 <USB_EPStartXfer+0x116e>
 8004a68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e061      	b.n	8004b5a <USB_EPStartXfer+0x1232>
 8004a96:	463b      	mov	r3, r7
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a9e:	d81a      	bhi.n	8004ad6 <USB_EPStartXfer+0x11ae>
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004aac:	463b      	mov	r3, r7
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <USB_EPStartXfer+0x119c>
 8004aba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ac4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	e041      	b.n	8004b5a <USB_EPStartXfer+0x1232>
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <USB_EPStartXfer+0x11d2>
 8004af0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004af4:	3b01      	subs	r3, #1
 8004af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004afa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	029b      	lsls	r3, r3, #10
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	e021      	b.n	8004b5a <USB_EPStartXfer+0x1232>
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d11c      	bne.n	8004b5a <USB_EPStartXfer+0x1232>
 8004b20:	1d3b      	adds	r3, r7, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b30:	4413      	add	r3, r2
 8004b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b36:	463b      	mov	r3, r7
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	011a      	lsls	r2, r3, #4
 8004b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b42:	4413      	add	r3, r2
 8004b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b58:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 81a4 	beq.w	8004eae <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b7a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <USB_EPStartXfer+0x126a>
 8004b86:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b92:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 8187 	bne.w	8004eae <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ba0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 8180 	bne.w	8004eae <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]
 8004bf2:	e15c      	b.n	8004eae <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	78db      	ldrb	r3, [r3, #3]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	f040 8155 	bne.w	8004eaa <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	463b      	mov	r3, r7
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d90e      	bls.n	8004c2e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004c10:	463b      	mov	r3, r7
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	463b      	mov	r3, r7
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	619a      	str	r2, [r3, #24]
 8004c2c:	e008      	b.n	8004c40 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004c2e:	463b      	mov	r3, r7
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004c38:	463b      	mov	r3, r7
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c40:	463b      	mov	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d16f      	bne.n	8004d2a <USB_EPStartXfer+0x1402>
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c52:	1d3b      	adds	r3, r7, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c62:	4413      	add	r3, r2
 8004c64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c68:	463b      	mov	r3, r7
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	011a      	lsls	r2, r3, #4
 8004c70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c74:	4413      	add	r3, r2
 8004c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d116      	bne.n	8004cb4 <USB_EPStartXfer+0x138c>
 8004c86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	e05f      	b.n	8004d74 <USB_EPStartXfer+0x144c>
 8004cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8004cba:	d818      	bhi.n	8004cee <USB_EPStartXfer+0x13c6>
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <USB_EPStartXfer+0x13b4>
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	029b      	lsls	r3, r3, #10
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e042      	b.n	8004d74 <USB_EPStartXfer+0x144c>
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <USB_EPStartXfer+0x13e6>
 8004d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	e024      	b.n	8004d74 <USB_EPStartXfer+0x144c>
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d11f      	bne.n	8004d74 <USB_EPStartXfer+0x144c>
 8004d34:	1d3b      	adds	r3, r7, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d3c:	1d3b      	adds	r3, r7, #4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d52:	463b      	mov	r3, r7
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	011a      	lsls	r2, r3, #4
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	4413      	add	r3, r2
 8004d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d16f      	bne.n	8004e66 <USB_EPStartXfer+0x153e>
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d9e:	4413      	add	r3, r2
 8004da0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004da4:	463b      	mov	r3, r7
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	011a      	lsls	r2, r3, #4
 8004dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <USB_EPStartXfer+0x14c8>
 8004dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	e05e      	b.n	8004eae <USB_EPStartXfer+0x1586>
 8004df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df4:	2b3e      	cmp	r3, #62	; 0x3e
 8004df6:	d818      	bhi.n	8004e2a <USB_EPStartXfer+0x1502>
 8004df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <USB_EPStartXfer+0x14f0>
 8004e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e12:	3301      	adds	r3, #1
 8004e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e041      	b.n	8004eae <USB_EPStartXfer+0x1586>
 8004e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <USB_EPStartXfer+0x1522>
 8004e40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e44:	3b01      	subs	r3, #1
 8004e46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	029b      	lsls	r3, r3, #10
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	e023      	b.n	8004eae <USB_EPStartXfer+0x1586>
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d11e      	bne.n	8004eae <USB_EPStartXfer+0x1586>
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e80:	4413      	add	r3, r2
 8004e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e86:	463b      	mov	r3, r7
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e92:	4413      	add	r3, r2
 8004e94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e001      	b.n	8004eae <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e02e      	b.n	8004f0c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ecc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ed0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ed4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ed8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ee0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	81bb      	strh	r3, [r7, #12]
 8004f40:	89bb      	ldrh	r3, [r7, #12]
 8004f42:	f083 0310 	eor.w	r3, r3, #16
 8004f46:	81bb      	strh	r3, [r7, #12]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	89bb      	ldrh	r3, [r7, #12]
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]
 8004f68:	e01f      	b.n	8004faa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	81fb      	strh	r3, [r7, #14]
 8004f82:	89fb      	ldrh	r3, [r7, #14]
 8004f84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f88:	81fb      	strh	r3, [r7, #14]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	89fb      	ldrh	r3, [r7, #14]
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7b1b      	ldrb	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 809d 	bne.w	8005104 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04c      	beq.n	800506c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	823b      	strh	r3, [r7, #16]
 8004fe0:	8a3b      	ldrh	r3, [r7, #16]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01b      	beq.n	8005022 <USB_EPClearStall+0x6c>
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005000:	81fb      	strh	r3, [r7, #14]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	89fb      	ldrh	r3, [r7, #14]
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	78db      	ldrb	r3, [r3, #3]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d06c      	beq.n	8005104 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005040:	81bb      	strh	r3, [r7, #12]
 8005042:	89bb      	ldrh	r3, [r7, #12]
 8005044:	f083 0320 	eor.w	r3, r3, #32
 8005048:	81bb      	strh	r3, [r7, #12]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	89bb      	ldrh	r3, [r7, #12]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]
 800506a:	e04b      	b.n	8005104 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	82fb      	strh	r3, [r7, #22]
 800507a:	8afb      	ldrh	r3, [r7, #22]
 800507c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <USB_EPClearStall+0x106>
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	82bb      	strh	r3, [r7, #20]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8abb      	ldrh	r3, [r7, #20]
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	827b      	strh	r3, [r7, #18]
 80050d4:	8a7b      	ldrh	r3, [r7, #18]
 80050d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050da:	827b      	strh	r3, [r7, #18]
 80050dc:	8a7b      	ldrh	r3, [r7, #18]
 80050de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050e2:	827b      	strh	r3, [r7, #18]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	8a7b      	ldrh	r3, [r7, #18]
 80050f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005100:	b29b      	uxth	r3, r3
 8005102:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800516c:	b29b      	uxth	r3, r3
 800516e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005192:	b480      	push	{r7}
 8005194:	b08d      	sub	sp, #52	; 0x34
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	4611      	mov	r1, r2
 800519e:	461a      	mov	r2, r3
 80051a0:	460b      	mov	r3, r1
 80051a2:	80fb      	strh	r3, [r7, #6]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	3301      	adds	r3, #1
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	005a      	lsls	r2, r3, #1
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ca:	e01e      	b.n	800520a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	3301      	adds	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	3302      	adds	r3, #2
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	3302      	adds	r3, #2
 80051fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	3301      	adds	r3, #1
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	3b01      	subs	r3, #1
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1dd      	bne.n	80051cc <USB_WritePMA+0x3a>
  }
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	3734      	adds	r7, #52	; 0x34
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800521c:	b480      	push	{r7}
 800521e:	b08b      	sub	sp, #44	; 0x2c
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4611      	mov	r1, r2
 8005228:	461a      	mov	r2, r3
 800522a:	460b      	mov	r3, r1
 800522c:	80fb      	strh	r3, [r7, #6]
 800522e:	4613      	mov	r3, r2
 8005230:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005232:	88bb      	ldrh	r3, [r7, #4]
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	005a      	lsls	r2, r3, #1
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	e01b      	b.n	800528e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	3302      	adds	r3, #2
 8005262:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	b2da      	uxtb	r2, r3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	3302      	adds	r3, #2
 8005286:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	3b01      	subs	r3, #1
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e0      	bne.n	8005256 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005294:	88bb      	ldrh	r3, [r7, #4]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	701a      	strb	r2, [r3, #0]
  }
}
 80052b0:	bf00      	nop
 80052b2:	372c      	adds	r7, #44	; 0x2c
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	460b      	mov	r3, r1
 80052c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7c1b      	ldrb	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d115      	bne.n	80052fe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d6:	2202      	movs	r2, #2
 80052d8:	2181      	movs	r1, #129	; 0x81
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fe8f 	bl	8006ffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ea:	2202      	movs	r2, #2
 80052ec:	2101      	movs	r1, #1
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fe85 	bl	8006ffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80052fc:	e012      	b.n	8005324 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052fe:	2340      	movs	r3, #64	; 0x40
 8005300:	2202      	movs	r2, #2
 8005302:	2181      	movs	r1, #129	; 0x81
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fe7a 	bl	8006ffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	2202      	movs	r2, #2
 8005314:	2101      	movs	r1, #1
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fe71 	bl	8006ffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005324:	2308      	movs	r3, #8
 8005326:	2203      	movs	r2, #3
 8005328:	2182      	movs	r1, #130	; 0x82
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f001 fe67 	bl	8006ffe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005336:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800533a:	f001 ff87 	bl	800724c <USBD_static_malloc>
 800533e:	4602      	mov	r2, r0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e026      	b.n	80053a4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7c1b      	ldrb	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800538a:	2101      	movs	r1, #1
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 ff27 	bl	80071e0 <USBD_LL_PrepareReceive>
 8005392:	e007      	b.n	80053a4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	2101      	movs	r1, #1
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 ff1e 	bl	80071e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80053be:	2181      	movs	r1, #129	; 0x81
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fe42 	bl	800704a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053cc:	2101      	movs	r1, #1
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fe3b 	bl	800704a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053dc:	2182      	movs	r1, #130	; 0x82
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 fe33 	bl	800704a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005404:	4618      	mov	r0, r3
 8005406:	f001 ff2d 	bl	8007264 <USBD_static_free>
    pdev->pClassData = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005442:	2b00      	cmp	r3, #0
 8005444:	d039      	beq.n	80054ba <USBD_CDC_Setup+0x9e>
 8005446:	2b20      	cmp	r3, #32
 8005448:	d17f      	bne.n	800554a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	88db      	ldrh	r3, [r3, #6]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d029      	beq.n	80054a6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b25b      	sxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	da11      	bge.n	8005480 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005468:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	88d2      	ldrh	r2, [r2, #6]
 800546e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005470:	6939      	ldr	r1, [r7, #16]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	88db      	ldrh	r3, [r3, #6]
 8005476:	461a      	mov	r2, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 fa0a 	bl	8006892 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800547e:	e06b      	b.n	8005558 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785a      	ldrb	r2, [r3, #1]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005496:	6939      	ldr	r1, [r7, #16]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	88db      	ldrh	r3, [r3, #6]
 800549c:	461a      	mov	r2, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 fa25 	bl	80068ee <USBD_CtlPrepareRx>
      break;
 80054a4:	e058      	b.n	8005558 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	7850      	ldrb	r0, [r2, #1]
 80054b2:	2200      	movs	r2, #0
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	4798      	blx	r3
      break;
 80054b8:	e04e      	b.n	8005558 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b0b      	cmp	r3, #11
 80054c0:	d02e      	beq.n	8005520 <USBD_CDC_Setup+0x104>
 80054c2:	2b0b      	cmp	r3, #11
 80054c4:	dc38      	bgt.n	8005538 <USBD_CDC_Setup+0x11c>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <USBD_CDC_Setup+0xb4>
 80054ca:	2b0a      	cmp	r3, #10
 80054cc:	d014      	beq.n	80054f8 <USBD_CDC_Setup+0xdc>
 80054ce:	e033      	b.n	8005538 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d107      	bne.n	80054ea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	2202      	movs	r2, #2
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f9d5 	bl	8006892 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054e8:	e02e      	b.n	8005548 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 f966 	bl	80067be <USBD_CtlError>
            ret = USBD_FAIL;
 80054f2:	2302      	movs	r3, #2
 80054f4:	75fb      	strb	r3, [r7, #23]
          break;
 80054f6:	e027      	b.n	8005548 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d107      	bne.n	8005512 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005502:	f107 030f 	add.w	r3, r7, #15
 8005506:	2201      	movs	r2, #1
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 f9c1 	bl	8006892 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005510:	e01a      	b.n	8005548 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 f952 	bl	80067be <USBD_CtlError>
            ret = USBD_FAIL;
 800551a:	2302      	movs	r3, #2
 800551c:	75fb      	strb	r3, [r7, #23]
          break;
 800551e:	e013      	b.n	8005548 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005526:	2b03      	cmp	r3, #3
 8005528:	d00d      	beq.n	8005546 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f001 f946 	bl	80067be <USBD_CtlError>
            ret = USBD_FAIL;
 8005532:	2302      	movs	r3, #2
 8005534:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005536:	e006      	b.n	8005546 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 f93f 	bl	80067be <USBD_CtlError>
          ret = USBD_FAIL;
 8005540:	2302      	movs	r3, #2
 8005542:	75fb      	strb	r3, [r7, #23]
          break;
 8005544:	e000      	b.n	8005548 <USBD_CDC_Setup+0x12c>
          break;
 8005546:	bf00      	nop
      }
      break;
 8005548:	e006      	b.n	8005558 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 f936 	bl	80067be <USBD_CtlError>
      ret = USBD_FAIL;
 8005552:	2302      	movs	r3, #2
 8005554:	75fb      	strb	r3, [r7, #23]
      break;
 8005556:	bf00      	nop
  }

  return ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005574:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800557c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d03a      	beq.n	80055fe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	331c      	adds	r3, #28
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d029      	beq.n	80055f2 <USBD_CDC_DataIn+0x90>
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	331c      	adds	r3, #28
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78f9      	ldrb	r1, [r7, #3]
 80055b2:	68b8      	ldr	r0, [r7, #8]
 80055b4:	460b      	mov	r3, r1
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4403      	add	r3, r0
 80055be:	3338      	adds	r3, #56	; 0x38
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80055c6:	fb03 f301 	mul.w	r3, r3, r1
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d110      	bne.n	80055f2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	331c      	adds	r3, #28
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055e4:	78f9      	ldrb	r1, [r7, #3]
 80055e6:	2300      	movs	r3, #0
 80055e8:	2200      	movs	r2, #0
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 fdd5 	bl	800719a <USBD_LL_Transmit>
 80055f0:	e003      	b.n	80055fa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 fe00 	bl	8007226 <USBD_LL_GetRxDataSize>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800564c:	4611      	mov	r1, r2
 800564e:	4798      	blx	r3

    return USBD_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e000      	b.n	8005656 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <USBD_CDC_EP0_RxReady+0x46>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800567e:	2bff      	cmp	r3, #255	; 0xff
 8005680:	d010      	beq.n	80056a4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005690:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005698:	b292      	uxth	r2, r2
 800569a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	22ff      	movs	r2, #255	; 0xff
 80056a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2243      	movs	r2, #67	; 0x43
 80056bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80056be:	4b03      	ldr	r3, [pc, #12]	; (80056cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000098 	.word	0x20000098

080056d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2243      	movs	r2, #67	; 0x43
 80056dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000054 	.word	0x20000054

080056f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2243      	movs	r2, #67	; 0x43
 80056fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80056fe:	4b03      	ldr	r3, [pc, #12]	; (800570c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	200000dc 	.word	0x200000dc

08005710 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	220a      	movs	r2, #10
 800571c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800571e:	4b03      	ldr	r3, [pc, #12]	; (800572c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000010 	.word	0x20000010

08005730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800573a:	2302      	movs	r3, #2
 800573c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005770:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01c      	beq.n	8005808 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d115      	bne.n	8005804 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2181      	movs	r1, #129	; 0x81
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fccd 	bl	800719a <USBD_LL_Transmit>

      return USBD_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e002      	b.n	800580a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005808:	2302      	movs	r3, #2
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005820:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d017      	beq.n	800585c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	7c1b      	ldrb	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800583a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800583e:	2101      	movs	r1, #1
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 fccd 	bl	80071e0 <USBD_LL_PrepareReceive>
 8005846:	e007      	b.n	8005858 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800584e:	2340      	movs	r3, #64	; 0x40
 8005850:	2101      	movs	r1, #1
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 fcc4 	bl	80071e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	4613      	mov	r3, r2
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800587a:	2302      	movs	r3, #2
 800587c:	e01a      	b.n	80058b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	79fa      	ldrb	r2, [r7, #7]
 80058aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f001 fb31 	bl	8006f14 <USBD_LL_Init>

  return USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d006      	beq.n	80058de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]
 80058dc:	e001      	b.n	80058e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80058de:	2302      	movs	r3, #2
 80058e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 fb66 	bl	8006fc8 <USBD_LL_Start>

  return USBD_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005926:	2302      	movs	r3, #2
 8005928:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	4611      	mov	r1, r2
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	4611      	mov	r1, r2
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3

  return USBD_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fed8 	bl	8006746 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d016      	beq.n	80059e8 <USBD_LL_SetupStage+0x6a>
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d81c      	bhi.n	80059f8 <USBD_LL_SetupStage+0x7a>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <USBD_LL_SetupStage+0x4a>
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d008      	beq.n	80059d8 <USBD_LL_SetupStage+0x5a>
 80059c6:	e017      	b.n	80059f8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f9cb 	bl	8005d6c <USBD_StdDevReq>
      break;
 80059d6:	e01a      	b.n	8005a0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa2d 	bl	8005e40 <USBD_StdItfReq>
      break;
 80059e6:	e012      	b.n	8005a0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa6d 	bl	8005ed0 <USBD_StdEPReq>
      break;
 80059f6:	e00a      	b.n	8005a0e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fb3e 	bl	8007088 <USBD_LL_StallEP>
      break;
 8005a0c:	bf00      	nop
  }

  return USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	460b      	mov	r3, r1
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d14b      	bne.n	8005ac4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d134      	bne.n	8005aa8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d919      	bls.n	8005a7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d203      	bcs.n	8005a6c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	e002      	b.n	8005a72 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 ff57 	bl	800692a <USBD_CtlContinueRx>
 8005a7c:	e038      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d105      	bne.n	8005aa0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 ff54 	bl	800694e <USBD_CtlSendStatus>
 8005aa6:	e023      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d11e      	bne.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005aba:	2100      	movs	r1, #0
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f001 fae3 	bl	8007088 <USBD_LL_StallEP>
 8005ac2:	e015      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00d      	beq.n	8005aec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d108      	bne.n	8005aec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	7afa      	ldrb	r2, [r7, #11]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4798      	blx	r3
 8005aea:	e001      	b.n	8005af0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005aec:	2302      	movs	r3, #2
 8005aee:	e000      	b.n	8005af2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	460b      	mov	r3, r1
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d17f      	bne.n	8005c0e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3314      	adds	r3, #20
 8005b12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d15c      	bne.n	8005bd8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d915      	bls.n	8005b56 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fec1 	bl	80068ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f001 fb46 	bl	80071e0 <USBD_LL_PrepareReceive>
 8005b54:	e04e      	b.n	8005bf4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	6912      	ldr	r2, [r2, #16]
 8005b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b62:	fb02 f201 	mul.w	r2, r2, r1
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11c      	bne.n	8005ba6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d316      	bcc.n	8005ba6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d20f      	bcs.n	8005ba6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2100      	movs	r1, #0
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fe9d 	bl	80068ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f001 fb1e 	bl	80071e0 <USBD_LL_PrepareReceive>
 8005ba4:	e026      	b.n	8005bf4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d105      	bne.n	8005bc8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 fa5c 	bl	8007088 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fecf 	bl	8006974 <USBD_CtlReceiveStatus>
 8005bd6:	e00d      	b.n	8005bf4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d004      	beq.n	8005bec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f001 fa4a 	bl	8007088 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11d      	bne.n	8005c3a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fe81 	bl	8005906 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c0c:	e015      	b.n	8005c3a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d108      	bne.n	8005c36 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	7afa      	ldrb	r2, [r7, #11]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	4798      	blx	r3
 8005c34:	e001      	b.n	8005c3a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c36:	2302      	movs	r3, #2
 8005c38:	e000      	b.n	8005c3c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c4c:	2340      	movs	r3, #64	; 0x40
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f9d3 	bl	8006ffe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2180      	movs	r1, #128	; 0x80
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 f9c5 	bl	8006ffe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d009      	beq.n	8005cbc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6852      	ldr	r2, [r2, #4]
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
  }

  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d105      	bne.n	8005d2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d10b      	bne.n	8005d60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d82:	2b40      	cmp	r3, #64	; 0x40
 8005d84:	d005      	beq.n	8005d92 <USBD_StdDevReq+0x26>
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d84f      	bhi.n	8005e2a <USBD_StdDevReq+0xbe>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <USBD_StdDevReq+0x36>
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d14b      	bne.n	8005e2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
      break;
 8005da0:	e048      	b.n	8005e34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b09      	cmp	r3, #9
 8005da8:	d839      	bhi.n	8005e1e <USBD_StdDevReq+0xb2>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <USBD_StdDevReq+0x44>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005e01 	.word	0x08005e01
 8005db4:	08005e15 	.word	0x08005e15
 8005db8:	08005e1f 	.word	0x08005e1f
 8005dbc:	08005e0b 	.word	0x08005e0b
 8005dc0:	08005e1f 	.word	0x08005e1f
 8005dc4:	08005de3 	.word	0x08005de3
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005e1f 	.word	0x08005e1f
 8005dd0:	08005df7 	.word	0x08005df7
 8005dd4:	08005ded 	.word	0x08005ded
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9dc 	bl	8006198 <USBD_GetDescriptor>
          break;
 8005de0:	e022      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb3f 	bl	8006468 <USBD_SetAddress>
          break;
 8005dea:	e01d      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fb7e 	bl	80064f0 <USBD_SetConfig>
          break;
 8005df4:	e018      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fc07 	bl	800660c <USBD_GetConfig>
          break;
 8005dfe:	e013      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fc37 	bl	8006676 <USBD_GetStatus>
          break;
 8005e08:	e00e      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fc65 	bl	80066dc <USBD_SetFeature>
          break;
 8005e12:	e009      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fc74 	bl	8006704 <USBD_ClrFeature>
          break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fccc 	bl	80067be <USBD_CtlError>
          break;
 8005e26:	bf00      	nop
      }
      break;
 8005e28:	e004      	b.n	8005e34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fcc6 	bl	80067be <USBD_CtlError>
      break;
 8005e32:	bf00      	nop
  }

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d005      	beq.n	8005e66 <USBD_StdItfReq+0x26>
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d82e      	bhi.n	8005ebc <USBD_StdItfReq+0x7c>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <USBD_StdItfReq+0x26>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d12a      	bne.n	8005ebc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d81d      	bhi.n	8005eae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	889b      	ldrh	r3, [r3, #4]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d813      	bhi.n	8005ea4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	88db      	ldrh	r3, [r3, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d110      	bne.n	8005eb8 <USBD_StdItfReq+0x78>
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fd56 	bl	800694e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ea2:	e009      	b.n	8005eb8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fc89 	bl	80067be <USBD_CtlError>
          break;
 8005eac:	e004      	b.n	8005eb8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fc84 	bl	80067be <USBD_CtlError>
          break;
 8005eb6:	e000      	b.n	8005eba <USBD_StdItfReq+0x7a>
          break;
 8005eb8:	bf00      	nop
      }
      break;
 8005eba:	e004      	b.n	8005ec6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fc7d 	bl	80067be <USBD_CtlError>
      break;
 8005ec4:	bf00      	nop
  }

  return USBD_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	889b      	ldrh	r3, [r3, #4]
 8005ee2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d007      	beq.n	8005f00 <USBD_StdEPReq+0x30>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	f200 8146 	bhi.w	8006182 <USBD_StdEPReq+0x2b2>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <USBD_StdEPReq+0x40>
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	f040 8141 	bne.w	8006182 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      break;
 8005f0e:	e13d      	b.n	800618c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d10a      	bne.n	8005f32 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	e12d      	b.n	800618e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d007      	beq.n	8005f4a <USBD_StdEPReq+0x7a>
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f300 811b 	bgt.w	8006176 <USBD_StdEPReq+0x2a6>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d072      	beq.n	800602a <USBD_StdEPReq+0x15a>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d03a      	beq.n	8005fbe <USBD_StdEPReq+0xee>
 8005f48:	e115      	b.n	8006176 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d002      	beq.n	8005f5a <USBD_StdEPReq+0x8a>
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d015      	beq.n	8005f84 <USBD_StdEPReq+0xb4>
 8005f58:	e02b      	b.n	8005fb2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00c      	beq.n	8005f7a <USBD_StdEPReq+0xaa>
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d009      	beq.n	8005f7a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 f88c 	bl	8007088 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f888 	bl	8007088 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f78:	e020      	b.n	8005fbc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc1e 	bl	80067be <USBD_CtlError>
              break;
 8005f82:	e01b      	b.n	8005fbc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	885b      	ldrh	r3, [r3, #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10e      	bne.n	8005faa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <USBD_StdEPReq+0xda>
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d008      	beq.n	8005faa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	88db      	ldrh	r3, [r3, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 f86f 	bl	8007088 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fccf 	bl	800694e <USBD_CtlSendStatus>

              break;
 8005fb0:	e004      	b.n	8005fbc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fc02 	bl	80067be <USBD_CtlError>
              break;
 8005fba:	bf00      	nop
          }
          break;
 8005fbc:	e0e0      	b.n	8006180 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d002      	beq.n	8005fce <USBD_StdEPReq+0xfe>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d015      	beq.n	8005ff8 <USBD_StdEPReq+0x128>
 8005fcc:	e026      	b.n	800601c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00c      	beq.n	8005fee <USBD_StdEPReq+0x11e>
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d009      	beq.n	8005fee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 f852 	bl	8007088 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fe4:	2180      	movs	r1, #128	; 0x80
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 f84e 	bl	8007088 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fec:	e01c      	b.n	8006028 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fbe4 	bl	80067be <USBD_CtlError>
              break;
 8005ff6:	e017      	b.n	8006028 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	885b      	ldrh	r3, [r3, #2]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d112      	bne.n	8006026 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 f859 	bl	80070c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fc9a 	bl	800694e <USBD_CtlSendStatus>
              }
              break;
 800601a:	e004      	b.n	8006026 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fbcd 	bl	80067be <USBD_CtlError>
              break;
 8006024:	e000      	b.n	8006028 <USBD_StdEPReq+0x158>
              break;
 8006026:	bf00      	nop
          }
          break;
 8006028:	e0aa      	b.n	8006180 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	2b02      	cmp	r3, #2
 8006032:	d002      	beq.n	800603a <USBD_StdEPReq+0x16a>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d032      	beq.n	800609e <USBD_StdEPReq+0x1ce>
 8006038:	e097      	b.n	800616a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <USBD_StdEPReq+0x180>
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d004      	beq.n	8006050 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbb8 	bl	80067be <USBD_CtlError>
                break;
 800604e:	e091      	b.n	8006174 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006054:	2b00      	cmp	r3, #0
 8006056:	da0b      	bge.n	8006070 <USBD_StdEPReq+0x1a0>
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	3310      	adds	r3, #16
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	4413      	add	r3, r2
 800606c:	3304      	adds	r3, #4
 800606e:	e00b      	b.n	8006088 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2202      	movs	r2, #2
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fbfb 	bl	8006892 <USBD_CtlSendData>
              break;
 800609c:	e06a      	b.n	8006174 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800609e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da11      	bge.n	80060ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3318      	adds	r3, #24
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d117      	bne.n	80060f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fb7b 	bl	80067be <USBD_CtlError>
                  break;
 80060c8:	e054      	b.n	8006174 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	f003 020f 	and.w	r2, r3, #15
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fb68 	bl	80067be <USBD_CtlError>
                  break;
 80060ee:	e041      	b.n	8006174 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da0b      	bge.n	8006110 <USBD_StdEPReq+0x240>
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	3310      	adds	r3, #16
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	e00b      	b.n	8006128 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	3304      	adds	r3, #4
 8006128:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <USBD_StdEPReq+0x266>
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d103      	bne.n	800613e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e00e      	b.n	800615c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 ffde 	bl	8007104 <USBD_LL_IsStallEP>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e002      	b.n	800615c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2202      	movs	r2, #2
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fb95 	bl	8006892 <USBD_CtlSendData>
              break;
 8006168:	e004      	b.n	8006174 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fb26 	bl	80067be <USBD_CtlError>
              break;
 8006172:	bf00      	nop
          }
          break;
 8006174:	e004      	b.n	8006180 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fb20 	bl	80067be <USBD_CtlError>
          break;
 800617e:	bf00      	nop
      }
      break;
 8006180:	e004      	b.n	800618c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fb1a 	bl	80067be <USBD_CtlError>
      break;
 800618a:	bf00      	nop
  }

  return ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	885b      	ldrh	r3, [r3, #2]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	f200 8128 	bhi.w	800640e <USBD_GetDescriptor+0x276>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USBD_GetDescriptor+0x2c>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061e1 	.word	0x080061e1
 80061c8:	080061f9 	.word	0x080061f9
 80061cc:	08006239 	.word	0x08006239
 80061d0:	0800640f 	.word	0x0800640f
 80061d4:	0800640f 	.word	0x0800640f
 80061d8:	080063af 	.word	0x080063af
 80061dc:	080063db 	.word	0x080063db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	7c12      	ldrb	r2, [r2, #16]
 80061ec:	f107 0108 	add.w	r1, r7, #8
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
 80061f4:	60f8      	str	r0, [r7, #12]
      break;
 80061f6:	e112      	b.n	800641e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7c1b      	ldrb	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f107 0208 	add.w	r2, r7, #8
 800620c:	4610      	mov	r0, r2
 800620e:	4798      	blx	r3
 8006210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3301      	adds	r3, #1
 8006216:	2202      	movs	r2, #2
 8006218:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800621a:	e100      	b.n	800641e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	f107 0208 	add.w	r2, r7, #8
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	2202      	movs	r2, #2
 8006234:	701a      	strb	r2, [r3, #0]
      break;
 8006236:	e0f2      	b.n	800641e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	885b      	ldrh	r3, [r3, #2]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b05      	cmp	r3, #5
 8006240:	f200 80ac 	bhi.w	800639c <USBD_GetDescriptor+0x204>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <USBD_GetDescriptor+0xb4>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	08006265 	.word	0x08006265
 8006250:	08006299 	.word	0x08006299
 8006254:	080062cd 	.word	0x080062cd
 8006258:	08006301 	.word	0x08006301
 800625c:	08006335 	.word	0x08006335
 8006260:	08006369 	.word	0x08006369
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	7c12      	ldrb	r2, [r2, #16]
 800627c:	f107 0108 	add.w	r1, r7, #8
 8006280:	4610      	mov	r0, r2
 8006282:	4798      	blx	r3
 8006284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006286:	e091      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa97 	bl	80067be <USBD_CtlError>
            err++;
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	3301      	adds	r3, #1
 8006294:	72fb      	strb	r3, [r7, #11]
          break;
 8006296:	e089      	b.n	80063ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	7c12      	ldrb	r2, [r2, #16]
 80062b0:	f107 0108 	add.w	r1, r7, #8
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
 80062b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ba:	e077      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fa7d 	bl	80067be <USBD_CtlError>
            err++;
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	3301      	adds	r3, #1
 80062c8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ca:	e06f      	b.n	80063ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	7c12      	ldrb	r2, [r2, #16]
 80062e4:	f107 0108 	add.w	r1, r7, #8
 80062e8:	4610      	mov	r0, r2
 80062ea:	4798      	blx	r3
 80062ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ee:	e05d      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa63 	bl	80067be <USBD_CtlError>
            err++;
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	3301      	adds	r3, #1
 80062fc:	72fb      	strb	r3, [r7, #11]
          break;
 80062fe:	e055      	b.n	80063ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	7c12      	ldrb	r2, [r2, #16]
 8006318:	f107 0108 	add.w	r1, r7, #8
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
 8006320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006322:	e043      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa49 	bl	80067be <USBD_CtlError>
            err++;
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	3301      	adds	r3, #1
 8006330:	72fb      	strb	r3, [r7, #11]
          break;
 8006332:	e03b      	b.n	80063ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7c12      	ldrb	r2, [r2, #16]
 800634c:	f107 0108 	add.w	r1, r7, #8
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
 8006354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006356:	e029      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa2f 	bl	80067be <USBD_CtlError>
            err++;
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	3301      	adds	r3, #1
 8006364:	72fb      	strb	r3, [r7, #11]
          break;
 8006366:	e021      	b.n	80063ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	7c12      	ldrb	r2, [r2, #16]
 8006380:	f107 0108 	add.w	r1, r7, #8
 8006384:	4610      	mov	r0, r2
 8006386:	4798      	blx	r3
 8006388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800638a:	e00f      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa15 	bl	80067be <USBD_CtlError>
            err++;
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3301      	adds	r3, #1
 8006398:	72fb      	strb	r3, [r7, #11]
          break;
 800639a:	e007      	b.n	80063ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa0d 	bl	80067be <USBD_CtlError>
          err++;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	3301      	adds	r3, #1
 80063a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80063aa:	e038      	b.n	800641e <USBD_GetDescriptor+0x286>
 80063ac:	e037      	b.n	800641e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7c1b      	ldrb	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	4610      	mov	r0, r2
 80063c4:	4798      	blx	r3
 80063c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c8:	e029      	b.n	800641e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f9f6 	bl	80067be <USBD_CtlError>
        err++;
 80063d2:	7afb      	ldrb	r3, [r7, #11]
 80063d4:	3301      	adds	r3, #1
 80063d6:	72fb      	strb	r3, [r7, #11]
      break;
 80063d8:	e021      	b.n	800641e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7c1b      	ldrb	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f107 0208 	add.w	r2, r7, #8
 80063ee:	4610      	mov	r0, r2
 80063f0:	4798      	blx	r3
 80063f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	2207      	movs	r2, #7
 80063fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063fc:	e00f      	b.n	800641e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9dc 	bl	80067be <USBD_CtlError>
        err++;
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	3301      	adds	r3, #1
 800640a:	72fb      	strb	r3, [r7, #11]
      break;
 800640c:	e007      	b.n	800641e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f9d4 	bl	80067be <USBD_CtlError>
      err++;
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	3301      	adds	r3, #1
 800641a:	72fb      	strb	r3, [r7, #11]
      break;
 800641c:	bf00      	nop
  }

  if (err != 0U)
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11c      	bne.n	800645e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006424:	893b      	ldrh	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d011      	beq.n	800644e <USBD_GetDescriptor+0x2b6>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	88db      	ldrh	r3, [r3, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	88da      	ldrh	r2, [r3, #6]
 8006436:	893b      	ldrh	r3, [r7, #8]
 8006438:	4293      	cmp	r3, r2
 800643a:	bf28      	it	cs
 800643c:	4613      	movcs	r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	461a      	mov	r2, r3
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fa22 	bl	8006892 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	88db      	ldrh	r3, [r3, #6]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa79 	bl	800694e <USBD_CtlSendStatus>
 800645c:	e000      	b.n	8006460 <USBD_GetDescriptor+0x2c8>
    return;
 800645e:	bf00      	nop
    }
  }
}
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop

08006468 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	889b      	ldrh	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d130      	bne.n	80064dc <USBD_SetAddress+0x74>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	88db      	ldrh	r3, [r3, #6]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d12c      	bne.n	80064dc <USBD_SetAddress+0x74>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d828      	bhi.n	80064dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	885b      	ldrh	r3, [r3, #2]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	2b03      	cmp	r3, #3
 800649e:	d104      	bne.n	80064aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f98b 	bl	80067be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a8:	e01d      	b.n	80064e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	7bfa      	ldrb	r2, [r7, #15]
 80064ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fe50 	bl	800715c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa46 	bl	800694e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d0:	e009      	b.n	80064e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064da:	e004      	b.n	80064e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f96d 	bl	80067be <USBD_CtlError>
  }
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	4b41      	ldr	r3, [pc, #260]	; (8006608 <USBD_SetConfig+0x118>)
 8006502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006504:	4b40      	ldr	r3, [pc, #256]	; (8006608 <USBD_SetConfig+0x118>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d904      	bls.n	8006516 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f955 	bl	80067be <USBD_CtlError>
 8006514:	e075      	b.n	8006602 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651c:	2b02      	cmp	r3, #2
 800651e:	d002      	beq.n	8006526 <USBD_SetConfig+0x36>
 8006520:	2b03      	cmp	r3, #3
 8006522:	d023      	beq.n	800656c <USBD_SetConfig+0x7c>
 8006524:	e062      	b.n	80065ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006526:	4b38      	ldr	r3, [pc, #224]	; (8006608 <USBD_SetConfig+0x118>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01a      	beq.n	8006564 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800652e:	4b36      	ldr	r3, [pc, #216]	; (8006608 <USBD_SetConfig+0x118>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2203      	movs	r2, #3
 800653c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006540:	4b31      	ldr	r3, [pc, #196]	; (8006608 <USBD_SetConfig+0x118>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff f9e7 	bl	800591a <USBD_SetClassConfig>
 800654c:	4603      	mov	r3, r0
 800654e:	2b02      	cmp	r3, #2
 8006550:	d104      	bne.n	800655c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f932 	bl	80067be <USBD_CtlError>
            return;
 800655a:	e052      	b.n	8006602 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f9f6 	bl	800694e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006562:	e04e      	b.n	8006602 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9f2 	bl	800694e <USBD_CtlSendStatus>
        break;
 800656a:	e04a      	b.n	8006602 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800656c:	4b26      	ldr	r3, [pc, #152]	; (8006608 <USBD_SetConfig+0x118>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d112      	bne.n	800659a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800657c:	4b22      	ldr	r3, [pc, #136]	; (8006608 <USBD_SetConfig+0x118>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <USBD_SetConfig+0x118>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff f9e3 	bl	8005958 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9db 	bl	800694e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006598:	e033      	b.n	8006602 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <USBD_SetConfig+0x118>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d01d      	beq.n	80065e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff f9d1 	bl	8005958 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <USBD_SetConfig+0x118>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065c0:	4b11      	ldr	r3, [pc, #68]	; (8006608 <USBD_SetConfig+0x118>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff f9a7 	bl	800591a <USBD_SetClassConfig>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d104      	bne.n	80065dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f8f2 	bl	80067be <USBD_CtlError>
            return;
 80065da:	e012      	b.n	8006602 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f9b6 	bl	800694e <USBD_CtlSendStatus>
        break;
 80065e2:	e00e      	b.n	8006602 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f9b2 	bl	800694e <USBD_CtlSendStatus>
        break;
 80065ea:	e00a      	b.n	8006602 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f8e5 	bl	80067be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <USBD_SetConfig+0x118>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff f9ac 	bl	8005958 <USBD_ClrClassConfig>
        break;
 8006600:	bf00      	nop
    }
  }
}
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	2000019c 	.word	0x2000019c

0800660c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88db      	ldrh	r3, [r3, #6]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d004      	beq.n	8006628 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8cc 	bl	80067be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006626:	e022      	b.n	800666e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662e:	2b02      	cmp	r3, #2
 8006630:	dc02      	bgt.n	8006638 <USBD_GetConfig+0x2c>
 8006632:	2b00      	cmp	r3, #0
 8006634:	dc03      	bgt.n	800663e <USBD_GetConfig+0x32>
 8006636:	e015      	b.n	8006664 <USBD_GetConfig+0x58>
 8006638:	2b03      	cmp	r3, #3
 800663a:	d00b      	beq.n	8006654 <USBD_GetConfig+0x48>
 800663c:	e012      	b.n	8006664 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3308      	adds	r3, #8
 8006648:	2201      	movs	r2, #1
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f920 	bl	8006892 <USBD_CtlSendData>
        break;
 8006652:	e00c      	b.n	800666e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	2201      	movs	r2, #1
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f918 	bl	8006892 <USBD_CtlSendData>
        break;
 8006662:	e004      	b.n	800666e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f8a9 	bl	80067be <USBD_CtlError>
        break;
 800666c:	bf00      	nop
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006686:	3b01      	subs	r3, #1
 8006688:	2b02      	cmp	r3, #2
 800668a:	d81e      	bhi.n	80066ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	88db      	ldrh	r3, [r3, #6]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d004      	beq.n	800669e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f891 	bl	80067be <USBD_CtlError>
        break;
 800669c:	e01a      	b.n	80066d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f043 0202 	orr.w	r2, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	330c      	adds	r3, #12
 80066be:	2202      	movs	r2, #2
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8e5 	bl	8006892 <USBD_CtlSendData>
      break;
 80066c8:	e004      	b.n	80066d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f876 	bl	80067be <USBD_CtlError>
      break;
 80066d2:	bf00      	nop
  }
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	885b      	ldrh	r3, [r3, #2]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d106      	bne.n	80066fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f929 	bl	800694e <USBD_CtlSendStatus>
  }
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006714:	3b01      	subs	r3, #1
 8006716:	2b02      	cmp	r3, #2
 8006718:	d80b      	bhi.n	8006732 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	885b      	ldrh	r3, [r3, #2]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10c      	bne.n	800673c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f90f 	bl	800694e <USBD_CtlSendStatus>
      }
      break;
 8006730:	e004      	b.n	800673c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f842 	bl	80067be <USBD_CtlError>
      break;
 800673a:	e000      	b.n	800673e <USBD_ClrFeature+0x3a>
      break;
 800673c:	bf00      	nop
  }
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781a      	ldrb	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	785a      	ldrb	r2, [r3, #1]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	3302      	adds	r3, #2
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b29a      	uxth	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	3303      	adds	r3, #3
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	b29b      	uxth	r3, r3
 8006774:	4413      	add	r3, r2
 8006776:	b29a      	uxth	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b29a      	uxth	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	3305      	adds	r3, #5
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	b29b      	uxth	r3, r3
 8006790:	4413      	add	r3, r2
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	3306      	adds	r3, #6
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	3307      	adds	r3, #7
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	80da      	strh	r2, [r3, #6]

}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr

080067be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80067c8:	2180      	movs	r1, #128	; 0x80
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fc5c 	bl	8007088 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fc58 	bl	8007088 <USBD_LL_StallEP>
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d032      	beq.n	800685c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f834 	bl	8006864 <USBD_GetLen>
 80067fc:	4603      	mov	r3, r0
 80067fe:	3301      	adds	r3, #1
 8006800:	b29b      	uxth	r3, r3
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	75fa      	strb	r2, [r7, #23]
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4413      	add	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	7812      	ldrb	r2, [r2, #0]
 800681a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	75fa      	strb	r2, [r7, #23]
 8006822:	461a      	mov	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4413      	add	r3, r2
 8006828:	2203      	movs	r2, #3
 800682a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800682c:	e012      	b.n	8006854 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	60fa      	str	r2, [r7, #12]
 8006834:	7dfa      	ldrb	r2, [r7, #23]
 8006836:	1c51      	adds	r1, r2, #1
 8006838:	75f9      	strb	r1, [r7, #23]
 800683a:	4611      	mov	r1, r2
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	440a      	add	r2, r1
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	75fa      	strb	r2, [r7, #23]
 800684a:	461a      	mov	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4413      	add	r3, r2
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e8      	bne.n	800682e <USBD_GetString+0x4e>
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006870:	e005      	b.n	800687e <USBD_GetLen+0x1a>
  {
    len++;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	3301      	adds	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3301      	adds	r3, #1
 800687c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f5      	bne.n	8006872 <USBD_GetLen+0xe>
  }

  return len;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	4613      	mov	r3, r2
 800689e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80068ae:	88fa      	ldrh	r2, [r7, #6]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fc6d 	bl	800719a <USBD_LL_Transmit>

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	2100      	movs	r1, #0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fc5b 	bl	800719a <USBD_LL_Transmit>

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	4613      	mov	r3, r2
 80068fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2203      	movs	r2, #3
 8006900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006904:	88fa      	ldrh	r2, [r7, #6]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	2100      	movs	r1, #0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fc60 	bl	80071e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	4613      	mov	r3, r2
 8006936:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	2100      	movs	r1, #0
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fc4e 	bl	80071e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2204      	movs	r2, #4
 800695a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800695e:	2300      	movs	r3, #0
 8006960:	2200      	movs	r2, #0
 8006962:	2100      	movs	r1, #0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc18 	bl	800719a <USBD_LL_Transmit>

  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2205      	movs	r2, #5
 8006980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006984:	2300      	movs	r3, #0
 8006986:	2200      	movs	r2, #0
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fc28 	bl	80071e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069a0:	2200      	movs	r2, #0
 80069a2:	4912      	ldr	r1, [pc, #72]	; (80069ec <MX_USB_DEVICE_Init+0x50>)
 80069a4:	4812      	ldr	r0, [pc, #72]	; (80069f0 <MX_USB_DEVICE_Init+0x54>)
 80069a6:	f7fe ff5e 	bl	8005866 <USBD_Init>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069b0:	f7f9 fcac 	bl	800030c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069b4:	490f      	ldr	r1, [pc, #60]	; (80069f4 <MX_USB_DEVICE_Init+0x58>)
 80069b6:	480e      	ldr	r0, [pc, #56]	; (80069f0 <MX_USB_DEVICE_Init+0x54>)
 80069b8:	f7fe ff80 	bl	80058bc <USBD_RegisterClass>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069c2:	f7f9 fca3 	bl	800030c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069c6:	490c      	ldr	r1, [pc, #48]	; (80069f8 <MX_USB_DEVICE_Init+0x5c>)
 80069c8:	4809      	ldr	r0, [pc, #36]	; (80069f0 <MX_USB_DEVICE_Init+0x54>)
 80069ca:	f7fe feb1 	bl	8005730 <USBD_CDC_RegisterInterface>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069d4:	f7f9 fc9a 	bl	800030c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069d8:	4805      	ldr	r0, [pc, #20]	; (80069f0 <MX_USB_DEVICE_Init+0x54>)
 80069da:	f7fe ff88 	bl	80058ee <USBD_Start>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069e4:	f7f9 fc92 	bl	800030c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000130 	.word	0x20000130
 80069f0:	200003c4 	.word	0x200003c4
 80069f4:	2000001c 	.word	0x2000001c
 80069f8:	20000120 	.word	0x20000120

080069fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a00:	2200      	movs	r2, #0
 8006a02:	4905      	ldr	r1, [pc, #20]	; (8006a18 <CDC_Init_FS+0x1c>)
 8006a04:	4805      	ldr	r0, [pc, #20]	; (8006a1c <CDC_Init_FS+0x20>)
 8006a06:	f7fe fea9 	bl	800575c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a0a:	4905      	ldr	r1, [pc, #20]	; (8006a20 <CDC_Init_FS+0x24>)
 8006a0c:	4803      	ldr	r0, [pc, #12]	; (8006a1c <CDC_Init_FS+0x20>)
 8006a0e:	f7fe febe 	bl	800578e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000a70 	.word	0x20000a70
 8006a1c:	200003c4 	.word	0x200003c4
 8006a20:	20000688 	.word	0x20000688

08006a24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr
	...

08006a34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	6039      	str	r1, [r7, #0]
 8006a3e:	71fb      	strb	r3, [r7, #7]
 8006a40:	4613      	mov	r3, r2
 8006a42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	2b23      	cmp	r3, #35	; 0x23
 8006a48:	d84a      	bhi.n	8006ae0 <CDC_Control_FS+0xac>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <CDC_Control_FS+0x1c>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006ae1 	.word	0x08006ae1
 8006a54:	08006ae1 	.word	0x08006ae1
 8006a58:	08006ae1 	.word	0x08006ae1
 8006a5c:	08006ae1 	.word	0x08006ae1
 8006a60:	08006ae1 	.word	0x08006ae1
 8006a64:	08006ae1 	.word	0x08006ae1
 8006a68:	08006ae1 	.word	0x08006ae1
 8006a6c:	08006ae1 	.word	0x08006ae1
 8006a70:	08006ae1 	.word	0x08006ae1
 8006a74:	08006ae1 	.word	0x08006ae1
 8006a78:	08006ae1 	.word	0x08006ae1
 8006a7c:	08006ae1 	.word	0x08006ae1
 8006a80:	08006ae1 	.word	0x08006ae1
 8006a84:	08006ae1 	.word	0x08006ae1
 8006a88:	08006ae1 	.word	0x08006ae1
 8006a8c:	08006ae1 	.word	0x08006ae1
 8006a90:	08006ae1 	.word	0x08006ae1
 8006a94:	08006ae1 	.word	0x08006ae1
 8006a98:	08006ae1 	.word	0x08006ae1
 8006a9c:	08006ae1 	.word	0x08006ae1
 8006aa0:	08006ae1 	.word	0x08006ae1
 8006aa4:	08006ae1 	.word	0x08006ae1
 8006aa8:	08006ae1 	.word	0x08006ae1
 8006aac:	08006ae1 	.word	0x08006ae1
 8006ab0:	08006ae1 	.word	0x08006ae1
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006ae1 	.word	0x08006ae1
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006ae1 	.word	0x08006ae1
 8006acc:	08006ae1 	.word	0x08006ae1
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006ae1 	.word	0x08006ae1
 8006ad8:	08006ae1 	.word	0x08006ae1
 8006adc:	08006ae1 	.word	0x08006ae1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ae0:	bf00      	nop
  }

  return (USBD_OK);
 8006ae2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4805      	ldr	r0, [pc, #20]	; (8006b14 <CDC_Receive_FS+0x24>)
 8006afe:	f7fe fe46 	bl	800578e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b02:	4804      	ldr	r0, [pc, #16]	; (8006b14 <CDC_Receive_FS+0x24>)
 8006b04:	f7fe fe85 	bl	8005812 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	200003c4 	.word	0x200003c4

08006b18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <CDC_Transmit_FS+0x48>)
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e00b      	b.n	8006b56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4806      	ldr	r0, [pc, #24]	; (8006b60 <CDC_Transmit_FS+0x48>)
 8006b46:	f7fe fe09 	bl	800575c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b4a:	4805      	ldr	r0, [pc, #20]	; (8006b60 <CDC_Transmit_FS+0x48>)
 8006b4c:	f7fe fe32 	bl	80057b4 <USBD_CDC_TransmitPacket>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200003c4 	.word	0x200003c4

08006b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2212      	movs	r2, #18
 8006b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2000014c 	.word	0x2000014c

08006b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2204      	movs	r2, #4
 8006b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b9a:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000160 	.word	0x20000160

08006bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d105      	bne.n	8006bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	4907      	ldr	r1, [pc, #28]	; (8006be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bc2:	4808      	ldr	r0, [pc, #32]	; (8006be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bc4:	f7ff fe0c 	bl	80067e0 <USBD_GetString>
 8006bc8:	e004      	b.n	8006bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	4904      	ldr	r1, [pc, #16]	; (8006be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bce:	4805      	ldr	r0, [pc, #20]	; (8006be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bd0:	f7ff fe06 	bl	80067e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bd4:	4b02      	ldr	r3, [pc, #8]	; (8006be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000e58 	.word	0x20000e58
 8006be4:	08007380 	.word	0x08007380

08006be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	4904      	ldr	r1, [pc, #16]	; (8006c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bf8:	4804      	ldr	r0, [pc, #16]	; (8006c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bfa:	f7ff fdf1 	bl	80067e0 <USBD_GetString>
  return USBD_StrDesc;
 8006bfe:	4b02      	ldr	r3, [pc, #8]	; (8006c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000e58 	.word	0x20000e58
 8006c0c:	0800738c 	.word	0x0800738c

08006c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	221a      	movs	r2, #26
 8006c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c22:	f000 f843 	bl	8006cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c26:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000164 	.word	0x20000164

08006c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	4907      	ldr	r1, [pc, #28]	; (8006c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c4a:	4808      	ldr	r0, [pc, #32]	; (8006c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c4c:	f7ff fdc8 	bl	80067e0 <USBD_GetString>
 8006c50:	e004      	b.n	8006c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	4904      	ldr	r1, [pc, #16]	; (8006c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c56:	4805      	ldr	r0, [pc, #20]	; (8006c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c58:	f7ff fdc2 	bl	80067e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c5c:	4b02      	ldr	r3, [pc, #8]	; (8006c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000e58 	.word	0x20000e58
 8006c6c:	080073a0 	.word	0x080073a0

08006c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	4907      	ldr	r1, [pc, #28]	; (8006ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c86:	4808      	ldr	r0, [pc, #32]	; (8006ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c88:	f7ff fdaa 	bl	80067e0 <USBD_GetString>
 8006c8c:	e004      	b.n	8006c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	4904      	ldr	r1, [pc, #16]	; (8006ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c92:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c94:	f7ff fda4 	bl	80067e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c98:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000e58 	.word	0x20000e58
 8006ca8:	080073ac 	.word	0x080073ac

08006cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <Get_SerialNum+0x44>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cb8:	4b0e      	ldr	r3, [pc, #56]	; (8006cf4 <Get_SerialNum+0x48>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <Get_SerialNum+0x4c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	4909      	ldr	r1, [pc, #36]	; (8006cfc <Get_SerialNum+0x50>)
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f814 	bl	8006d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cdc:	2204      	movs	r2, #4
 8006cde:	4908      	ldr	r1, [pc, #32]	; (8006d00 <Get_SerialNum+0x54>)
 8006ce0:	68b8      	ldr	r0, [r7, #8]
 8006ce2:	f000 f80f 	bl	8006d04 <IntToUnicode>
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	1ffff7e8 	.word	0x1ffff7e8
 8006cf4:	1ffff7ec 	.word	0x1ffff7ec
 8006cf8:	1ffff7f0 	.word	0x1ffff7f0
 8006cfc:	20000166 	.word	0x20000166
 8006d00:	20000176 	.word	0x20000176

08006d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	75fb      	strb	r3, [r7, #23]
 8006d1a:	e027      	b.n	8006d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	0f1b      	lsrs	r3, r3, #28
 8006d20:	2b09      	cmp	r3, #9
 8006d22:	d80b      	bhi.n	8006d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	0f1b      	lsrs	r3, r3, #28
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4619      	mov	r1, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	440b      	add	r3, r1
 8006d34:	3230      	adds	r2, #48	; 0x30
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	e00a      	b.n	8006d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	0f1b      	lsrs	r3, r3, #28
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4619      	mov	r1, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3237      	adds	r2, #55	; 0x37
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	4413      	add	r3, r2
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
 8006d6c:	7dfa      	ldrb	r2, [r7, #23]
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d3d3      	bcc.n	8006d1c <IntToUnicode+0x18>
  }
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <HAL_PCD_MspInit+0x54>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d11b      	bne.n	8006dca <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <HAL_PCD_MspInit+0x58>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <HAL_PCD_MspInit+0x58>)
 8006d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d9c:	61d3      	str	r3, [r2, #28]
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <HAL_PCD_MspInit+0x58>)
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	2013      	movs	r0, #19
 8006db0:	f7f9 fca9 	bl	8000706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006db4:	2013      	movs	r0, #19
 8006db6:	f7f9 fcc2 	bl	800073e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	2014      	movs	r0, #20
 8006dc0:	f7f9 fca1 	bl	8000706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006dc4:	2014      	movs	r0, #20
 8006dc6:	f7f9 fcba 	bl	800073e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40005c00 	.word	0x40005c00
 8006dd8:	40021000 	.word	0x40021000

08006ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7fe fdc3 	bl	800597e <USBD_LL_SetupStage>
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	440b      	add	r3, r1
 8006e20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7fe fdf5 	bl	8005a18 <USBD_LL_DataOutStage>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	440b      	add	r3, r1
 8006e56:	333c      	adds	r3, #60	; 0x3c
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f7fe fe4c 	bl	8005afa <USBD_LL_DataInStage>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe ff5c 	bl	8005d36 <USBD_LL_SOF>
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d001      	beq.n	8006e9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e9a:	f7f9 fa37 	bl	800030c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ea4:	7bfa      	ldrb	r2, [r7, #15]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe ff0c 	bl	8005cc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fec5 	bl	8005c44 <USBD_LL_Reset>
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe ff06 	bl	8005ce4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <HAL_PCD_SuspendCallback+0x30>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	4a03      	ldr	r2, [pc, #12]	; (8006ef4 <HAL_PCD_SuspendCallback+0x30>)
 8006ee6:	f043 0306 	orr.w	r3, r3, #6
 8006eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	e000ed00 	.word	0xe000ed00

08006ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe ff00 	bl	8005d0c <USBD_LL_Resume>
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006f1c:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f2c:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f2e:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <USBD_LL_Init+0xb0>)
 8006f30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f32:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f34:	2208      	movs	r2, #8
 8006f36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f38:	4b21      	ldr	r3, [pc, #132]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f3e:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f44:	4b1e      	ldr	r3, [pc, #120]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f4a:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f50:	481b      	ldr	r0, [pc, #108]	; (8006fc0 <USBD_LL_Init+0xac>)
 8006f52:	f7f9 fdc4 	bl	8000ade <HAL_PCD_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f5c:	f7f9 f9d6 	bl	800030c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f66:	2318      	movs	r3, #24
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	f7fb fa3a 	bl	80023e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f76:	2358      	movs	r3, #88	; 0x58
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	f7fb fa32 	bl	80023e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f86:	23c0      	movs	r3, #192	; 0xc0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2181      	movs	r1, #129	; 0x81
 8006f8c:	f7fb fa2a 	bl	80023e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f96:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	f7fb fa21 	bl	80023e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fac:	2200      	movs	r2, #0
 8006fae:	2182      	movs	r1, #130	; 0x82
 8006fb0:	f7fb fa18 	bl	80023e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20001058 	.word	0x20001058
 8006fc4:	40005c00 	.word	0x40005c00

08006fc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7f9 fe88 	bl	8000cf4 <HAL_PCD_Start>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f94e 	bl	800728c <USBD_Get_USB_Status>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	461a      	mov	r2, r3
 800700c:	4603      	mov	r3, r0
 800700e:	70fb      	strb	r3, [r7, #3]
 8007010:	460b      	mov	r3, r1
 8007012:	70bb      	strb	r3, [r7, #2]
 8007014:	4613      	mov	r3, r2
 8007016:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007026:	78bb      	ldrb	r3, [r7, #2]
 8007028:	883a      	ldrh	r2, [r7, #0]
 800702a:	78f9      	ldrb	r1, [r7, #3]
 800702c:	f7fa f802 	bl	8001034 <HAL_PCD_EP_Open>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f928 	bl	800728c <USBD_Get_USB_Status>
 800703c:	4603      	mov	r3, r0
 800703e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007040:	7bbb      	ldrb	r3, [r7, #14]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f7fa f849 	bl	8001100 <HAL_PCD_EP_Close>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f909 	bl	800728c <USBD_Get_USB_Status>
 800707a:	4603      	mov	r3, r0
 800707c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800707e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fa f909 	bl	80012be <HAL_PCD_EP_SetStall>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f8ea 	bl	800728c <USBD_Get_USB_Status>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fa f94a 	bl	800137e <HAL_PCD_EP_ClrStall>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 f8cb 	bl	800728c <USBD_Get_USB_Status>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007116:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800711c:	2b00      	cmp	r3, #0
 800711e:	da0c      	bge.n	800713a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	440b      	add	r3, r1
 8007134:	3302      	adds	r3, #2
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	e00b      	b.n	8007152 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007140:	68f9      	ldr	r1, [r7, #12]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	440b      	add	r3, r1
 800714c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007150:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	4611      	mov	r1, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 ff35 	bl	8000fea <HAL_PCD_SetAddress>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f880 	bl	800728c <USBD_Get_USB_Status>
 800718c:	4603      	mov	r3, r0
 800718e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007190:	7bbb      	ldrb	r3, [r7, #14]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b086      	sub	sp, #24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	72fb      	strb	r3, [r7, #11]
 80071aa:	4613      	mov	r3, r2
 80071ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	7af9      	ldrb	r1, [r7, #11]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	f7fa f839 	bl	8001238 <HAL_PCD_EP_Transmit>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f85d 	bl	800728c <USBD_Get_USB_Status>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	461a      	mov	r2, r3
 80071ec:	460b      	mov	r3, r1
 80071ee:	72fb      	strb	r3, [r7, #11]
 80071f0:	4613      	mov	r3, r2
 80071f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007202:	893b      	ldrh	r3, [r7, #8]
 8007204:	7af9      	ldrb	r1, [r7, #11]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	f7f9 ffc2 	bl	8001190 <HAL_PCD_EP_Receive>
 800720c:	4603      	mov	r3, r0
 800720e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f83a 	bl	800728c <USBD_Get_USB_Status>
 8007218:	4603      	mov	r3, r0
 800721a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800721c:	7dbb      	ldrb	r3, [r7, #22]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f7f9 ffe4 	bl	800120a <HAL_PCD_EP_GetRxCount>
 8007242:	4603      	mov	r3, r0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <USBD_static_malloc+0x14>)
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	200001a0 	.word	0x200001a0

08007264 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr

08007276 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	2b03      	cmp	r3, #3
 800729e:	d817      	bhi.n	80072d0 <USBD_Get_USB_Status+0x44>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <USBD_Get_USB_Status+0x1c>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072bf 	.word	0x080072bf
 80072b0:	080072c5 	.word	0x080072c5
 80072b4:	080072cb 	.word	0x080072cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]
    break;
 80072bc:	e00b      	b.n	80072d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072be:	2302      	movs	r3, #2
 80072c0:	73fb      	strb	r3, [r7, #15]
    break;
 80072c2:	e008      	b.n	80072d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072c4:	2301      	movs	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]
    break;
 80072c8:	e005      	b.n	80072d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072ca:	2302      	movs	r3, #2
 80072cc:	73fb      	strb	r3, [r7, #15]
    break;
 80072ce:	e002      	b.n	80072d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072d0:	2302      	movs	r3, #2
 80072d2:	73fb      	strb	r3, [r7, #15]
    break;
 80072d4:	bf00      	nop
  }
  return usb_status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop

080072e4 <__libc_init_array>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	2600      	movs	r6, #0
 80072e8:	4d0c      	ldr	r5, [pc, #48]	; (800731c <__libc_init_array+0x38>)
 80072ea:	4c0d      	ldr	r4, [pc, #52]	; (8007320 <__libc_init_array+0x3c>)
 80072ec:	1b64      	subs	r4, r4, r5
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	d109      	bne.n	8007308 <__libc_init_array+0x24>
 80072f4:	f000 f822 	bl	800733c <_init>
 80072f8:	2600      	movs	r6, #0
 80072fa:	4d0a      	ldr	r5, [pc, #40]	; (8007324 <__libc_init_array+0x40>)
 80072fc:	4c0a      	ldr	r4, [pc, #40]	; (8007328 <__libc_init_array+0x44>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	42a6      	cmp	r6, r4
 8007304:	d105      	bne.n	8007312 <__libc_init_array+0x2e>
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	f855 3b04 	ldr.w	r3, [r5], #4
 800730c:	4798      	blx	r3
 800730e:	3601      	adds	r6, #1
 8007310:	e7ee      	b.n	80072f0 <__libc_init_array+0xc>
 8007312:	f855 3b04 	ldr.w	r3, [r5], #4
 8007316:	4798      	blx	r3
 8007318:	3601      	adds	r6, #1
 800731a:	e7f2      	b.n	8007302 <__libc_init_array+0x1e>
 800731c:	080073cc 	.word	0x080073cc
 8007320:	080073cc 	.word	0x080073cc
 8007324:	080073cc 	.word	0x080073cc
 8007328:	080073d0 	.word	0x080073d0

0800732c <memset>:
 800732c:	4603      	mov	r3, r0
 800732e:	4402      	add	r2, r0
 8007330:	4293      	cmp	r3, r2
 8007332:	d100      	bne.n	8007336 <memset+0xa>
 8007334:	4770      	bx	lr
 8007336:	f803 1b01 	strb.w	r1, [r3], #1
 800733a:	e7f9      	b.n	8007330 <memset+0x4>

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
